/* US202 */
CREATE TABLE GestorAgricola (
    idGestorAgricola    INTEGER    CONSTRAINT pk_GestorAgricola_idGestorAgricola PRIMARY KEY
);

CREATE TABLE ExploracaoAgricola (
                                    idExploracaoAgricola    INTEGER    CONSTRAINT pk_ExploracaoAgricola_idExploracaoAgricola PRIMARY KEY,
                                    idGestorAgricola        INTEGER

);

CREATE TABLE Cliente (
                         codigoInterno       INTEGER     GENERATED BY DEFAULT AS IDENTITY CONSTRAINT pk_Cliente_codigoInterno PRIMARY KEY,
                         email               VARCHAR(50)	CONSTRAINT uk_Cliente_email UNIQUE,
                         CONSTRAINT ck_Cliente_email CHECK (email LIKE '%@%.%' ),

                         tipo                CHAR(1),
                         CONSTRAINT ck_Cliente_tipo CHECK (tipo IN ('E', 'P')), /*Empresa / Particular*/

                         plafond             NUMBER(8, 2),
                         CONSTRAINT ck_Cliente_plafond CHECK (plafond >= 0),

                         nivelNegocio        CHAR(1),
                         CONSTRAINT ck_Cliente_nivelNegocio CHECK (nivelNegocio IN ('A', 'B', 'C')),

                         nome                VARCHAR(50),
                         nif                 NUMBER(9),
                         CONSTRAINT ck_Cliente_nif CHECK (nif > 100000000),
                         idHub               VARCHAR(5)
);

CREATE TABLE ClienteExploracaoAgricola (
                                           idExploracaoAgricola    INTEGER,
                                           codigoInternoCliente    INTEGER,
                                           CONSTRAINT pk_ClienteExploracaoAgricola_idExploracaoAgricola_codigoInternoCliente PRIMARY KEY (idExploracaoAgricola, codigoInternoCliente)
);


CREATE TABLE CodigoPostal (
                              codigoPostal    CHAR(8),
                              localidade      VARCHAR(100),
                              CONSTRAINT ck_CodigoPostal_codigoPostal CHECK (codigoPostal LIKE '____-___' ),
                              CONSTRAINT pk_CodigoPostal_codigoPostal PRIMARY KEY (codigoPostal)
);


CREATE TABLE Morada (
                        codigoPostal            CHAR(8),
                        CONSTRAINT ck_Morada_codigoPostal CHECK (codigoPostal LIKE '____-___' ),

                        numeroPorta             INTEGER,
                        CONSTRAINT ck_Morada_numeroPorta CHECK (numeroPorta >= 0),
                        codigoInternoCliente    INTEGER,
                        tipoMorada              CHAR(1),
                        CONSTRAINT ck_Morada_tipoMorada CHECK (tipoMorada IN ('C', 'E')), /*Correspondencia / Entrega*/

                        CONSTRAINT pk_Morada_codigoPostal_numeroPorta PRIMARY KEY (codigoPostal, numeroPorta)
);


CREATE TABLE Encomenda (
                           numeroEncomenda         INTEGER     GENERATED ALWAYS AS IDENTITY CONSTRAINT pk_Encomenda_numeroEncomenda PRIMARY KEY,
                           codigoInternoCliente    INTEGER,
                           codigoPostalMorada      CHAR(8),
                           numeroPortaMorada       INTEGER,
                           dataEncomenda           DATE DEFAULT SYSDATE
                               CONSTRAINT nn_Encomenda_dataEncomenda NOT NULL,

                           estado                  CHAR(1),
                           CONSTRAINT ck_Encomenda_estado CHECK (estado IN ('R', 'E', 'P')), /* Registada / Encomendada / Paga */

                           dataEntrega             DATE,
                           CONSTRAINT ck_Encomenda_dataEntrega CHECK (dataEntrega >= dataEncomenda),

                           dataPagamento           DATE,
                           CONSTRAINT ck_Encomenda_dataPagamento CHECK (dataPagamento >= dataEncomenda),

                           valorTotal              NUMBER(8, 2),
                           CONSTRAINT ck_Encomenda_valorTotal CHECK (valorTotal >= 0),
                           idHub              VARCHAR(5)
);

CREATE TABLE Incidente (
                           idIncidente             INTEGER      GENERATED ALWAYS AS IDENTITY CONSTRAINT pk_Incidente_idIncidente PRIMARY KEY,
                           codigoInternoCliente    INTEGER,
                           numeroEncomenda         INTEGER,
                           valorDivida             NUMBER(8, 2),
                           CONSTRAINT ck_Incidente_valorDivida CHECK (valorDivida >= 0),
                           dataSanado              DATE,
                           CONSTRAINT ck_Incidente_dataSanado CHECK (dataSanado >= dataOcorrencia),
                           dataOcorrencia          DATE CONSTRAINT nn_Incidente_dataOcorrencia NOT NULL

);

CREATE TABLE EstacaoMeteorologica (
                                      idEstacaoMeteorologica      INTEGER     GENERATED ALWAYS AS IDENTITY CONSTRAINT pk_EstacaoMeteorologica_idEstacaoMeteorologica PRIMARY KEY,
                                      idExploracaoAgricola        INTEGER
);

CREATE TABLE TipoSensor (
                            tipo        CHAR(2)     CONSTRAINT pk_TipoSensor_tipo PRIMARY KEY,
                            CONSTRAINT ck_TipoSensor_tipo CHECK (tipo IN ('HS', 'Pl', 'TS', 'VV', 'TA', 'HA', 'PA')), /* Humidade Solo / Pluviosidade / Temperatura solo / Velocidade Vento / temperatura Atmosférica / Humidade Ar / Pressão Atmosférica */

                            unidade     VARCHAR(5)  /*Exemplo: km/h*/
);

CREATE TABLE Sensor (
                        identificador               INTEGER     GENERATED BY DEFAULT AS IDENTITY CONSTRAINT pk_Sensor_identificador PRIMARY KEY,
                        idEstacaoMeteorologica      INTEGER,
                        tipoTipoSensor              CHAR(2)
);

CREATE TABLE SensorLeituras (
                                identificadorSensor              INTEGER,
                                tipoTipoSensor              CHAR(2),
                                valorLido                   INTEGER,
                                CONSTRAINT ck_Sensor_valorLido CHECK (valorLido >= 0 AND valorLido <= 100),
                                referencia                  INTEGER CONSTRAINT pk_SensorLeituras_referencia PRIMARY KEY,
                                instanteLeitura             VARCHAR(5)	    CONSTRAINT nn_Sensor_instanteLeitura NOT NULL

);

CREATE TABLE Setor (
                       designacao              VARCHAR(40),
                       idExploracaoAgricola    INTEGER,
                       areaTotal               NUMBER(8, 2),
                       CONSTRAINT ck_Setor_areaTotal CHECK (areaTotal >= 0),

                       CONSTRAINT pk_Setor_designacao_idExploracaoAgricola PRIMARY KEY (designacao, idExploracaoAgricola)
);


CREATE TABLE Auditoria (
                           idAuditoria          INTEGER     GENERATED ALWAYS AS IDENTITY CONSTRAINT pk_Auditoria_idAuditoria PRIMARY KEY,
                           idGestorAgricola            INTEGER,
                           designacaoSetor             VARCHAR(40),
                           idExploracaoAgricola        INTEGER,
                           dataHora                    DATE	CONSTRAINT nn_Auditoria_dataHora NOT NULL,
                           username                    VARCHAR(20) CONSTRAINT nn_Auditoria_username NOT NULL,
                           operacaoEscrita             CHAR(6),
                           CONSTRAINT ck_Auditoria_operacaoEscrita CHECK (operacaoEscrita IN ('INSERT', 'UPDATE', 'DELETE')) /* INSERT / UPDATE / DELETE */

);

CREATE TABLE OperacaoAgricola (
                                  idOperacaoAgricola          	INTEGER   GENERATED ALWAYS AS IDENTITY CONSTRAINT pk_OperacaoAgricola_idOperacaoAgricola PRIMARY KEY,
                                  designacaoSetor             	VARCHAR(40),
                                  idExploracaoAgricola        	INTEGER,

                                  dataAgendada                	DATE		CONSTRAINT nn_OperacaoAgricola_dataAgendada NOT NULL,
                                  dataRealizacao              	DATE,
                                  CONSTRAINT ck_OperacaoAgricola_dataRealizacao CHECK (dataRealizacao >= dataAgendada),

                                  tipo                        	VARCHAR(40)	CONSTRAINT nn_OperacaoAgricola_tipo NOT NULL,
                                  estadoOperacao              	CHAR(1),
                                  CONSTRAINT ck_OperacaoAgricola_estadoOperacao CHECK (estadoOperacao IN ('A', 'C', 'R', 'P')) /* Atualizada / Cancelada / Realizada / Planeada */

);

CREATE TABLE FatorProducao (
                               nomeComercial           VARCHAR(30),
                               tipo                    CHAR(2),
                               CONSTRAINT ck_FatorProducao_tipo CHECK (tipo IN ('CM', 'FE', 'PF')), /* Corretivo Mineral / Fertilizante / Produto fitofármaco */

                               fornecedor                      VARCHAR(30)   CONSTRAINT nn_FatorProducaoConstituinte_fornecedor NOT NULL,

                               CONSTRAINT pk_FatorProducao_nomeComercial PRIMARY KEY (nomeComercial)
);

CREATE TABLE FatoresAplicados (
                                  idOperacaoAgricola		        INTEGER,
                                  nomeComercialFatorProducao	    VARCHAR(30),
                                  quantidadeAplicada		        NUMBER(5, 2),
                                  CONSTRAINT ck_FatoresAplicados_quantidadeAplicada CHECK (quantidadeAplicada >= 0),

                                  formaAplicacao                    VARCHAR(10),
                                  CONSTRAINT ck_OperacaoAgricola_formaAplicacao CHECK (formaAplicacao IN ('Foliar', 'Fertirrega', 'Solo')),

                                  CONSTRAINT pk_FatoresAplicados_idOperacaoAgricola_nomeComercialFatorProducao PRIMARY KEY (idOperacaoAgricola, nomeComercialFatorProducao)

);

CREATE TABLE Restricao (
                           idRestricao                     INTEGER         GENERATED ALWAYS AS IDENTITY CONSTRAINT pk_Restricao_idRestricao PRIMARY KEY,
                           nomeComercialFatorProducao      VARCHAR(30),
                           dataInicial                     DATE             CONSTRAINT nn_Restricao_dataInicial NOT NULL,
                           dataFinal                       DATE,
                           CONSTRAINT ck_Restricao_dataFinal CHECK (dataFinal >= dataInicial)
);

CREATE TABLE RestricaoSetor (
                                idRestricao          INTEGER,
                                designacaoSetor      VARCHAR(40),
                                idExploracaoAgricola INTEGER,

                                CONSTRAINT pk_RestricaoSetor_idRestricao_designacaoSetor_idExploracaoAgricola PRIMARY KEY (idRestricao, designacaoSetor, idExploracaoAgricola)
);


CREATE TABLE Constituinte (
                              nome                VARCHAR(30),
                              quantidade          NUMBER(5, 2),
                              CONSTRAINT ck_Constituinte_quantidade CHECK (quantidade >= 0),

                              unidade             CHAR(5),
                              categoria           CHAR(1),
                              CONSTRAINT ck_Constituinte_categoria CHECK (categoria IN ('E', 'S')), /* Elemento / Substância */

                              CONSTRAINT pk_Constituinte_nome PRIMARY KEY (nome)
);

CREATE TABLE FatorProducaoConstituinte (
                                           nomeComercialFatorProducao      VARCHAR(30),
                                           nomeConstituinte                VARCHAR(30),
                                           CONSTRAINT pk_FatorProducaoConstituinte_nomeComercialFatorProducao_nomeConstituinte PRIMARY KEY (nomeComercialFatorProducao, nomeConstituinte)
);

CREATE TABLE Cultura (
                         idCultura               INTEGER      GENERATED ALWAYS AS IDENTITY CONSTRAINT pk_Cultura_idCultura PRIMARY KEY,
                         designacaoSetor         VARCHAR(40),
                         idExploracaoAgricola    INTEGER,
                         areaCultura             NUMBER(8, 2),
                         CONSTRAINT ck_Cultura_areaCultura CHECK (areaCultura >= 0),
                         tipo                    CHAR(1),
                         CONSTRAINT ck_Cultura_tipo CHECK (tipo IN ('P', 'T')), /* Permanente / temporário */

                         cultivo                 VARCHAR(40)

);

CREATE TABLE Produto (
                         idProduto               INTEGER      GENERATED ALWAYS AS IDENTITY CONSTRAINT pk_Produto_idProduto PRIMARY KEY,
                         nome                    VARCHAR(40)
);

CREATE TABLE CulturaProduto (
                                idCultura               INTEGER,
                                idProduto               INTEGER,
                                CONSTRAINT pk_CulturaProduto_idCultura_idProduto PRIMARY KEY (idCultura, idProduto)
);

CREATE TABLE Safra (
                       idSafra             INTEGER     GENERATED ALWAYS AS IDENTITY CONSTRAINT pk_Safra_idSafra PRIMARY KEY,
                       idCultura           INTEGER,
                       quantidadeProducao  INTEGER,
                       CONSTRAINT ck_Safra_quantidadeProducao CHECK (quantidadeProducao >= 0),

                       lucro               NUMBER(8, 2)

);

CREATE TABLE Caracteristica (
                                idCaracteristica    INTEGER     GENERATED ALWAYS AS IDENTITY,
                                idCultura           INTEGER,
                                nome                VARCHAR(20),

                                CONSTRAINT pk_Caracteristica_idCaracteristica_idCultura PRIMARY KEY (idCaracteristica, idCultura)
);

CREATE TABLE Parametro (
                           idParametro         INTEGER      GENERATED ALWAYS AS IDENTITY,
                           idCaracteristica    INTEGER,
                           idCultura           INTEGER,
                           nome                VARCHAR(20),

                           CONSTRAINT pk_Parametro_idParamentro_idCaracteristica_idCultura PRIMARY KEY (idParametro, idCaracteristica, idCultura)
);


CREATE TABLE Input_Sensor(
    input_string        VARCHAR(25)
);

CREATE TABLE Input_Hub(
    input_string       VARCHAR(25)
);

CREATE TABLE Hub(
                    idHub               VARCHAR(5)   CONSTRAINT pk_Hub_idHub PRIMARY KEY,
                    latitude            NUMBER(6,4),
                    longitude           NUMBER(6,4),
                    idParticipante      VARCHAR(5)
);

CREATE TABLE LogLeiturasInput(
                                 idLog               INTEGER GENERATED ALWAYS AS IDENTITY CONSTRAINT pk_LogLeiturasInput_idLog PRIMARY KEY,
                                 dataLeitura         TIMESTAMP,
                                 registosLidos       NUMBER,
                                 registosInseridos   NUMBER,
                                 registosComErro     NUMBER
);

ALTER TABLE ExploracaoAgricola ADD CONSTRAINT fk_ExploracaoAgricola_idGestorAgricola_GestorAgricola FOREIGN KEY (idGestorAgricola) REFERENCES GestorAgricola (idGestorAgricola);

ALTER TABLE Cliente ADD CONSTRAINT fk_Cliente_idHub_Hub FOREIGN KEY (idHub) REFERENCES Hub (idHub);

ALTER TABLE ClienteExploracaoAgricola ADD CONSTRAINT fk_ClienteExploracaoAgricola_idExploracaoAgricola_ExploracaoAgricola FOREIGN KEY (idExploracaoAgricola) REFERENCES ExploracaoAgricola (idExploracaoAgricola);
ALTER TABLE ClienteExploracaoAgricola ADD CONSTRAINT fk_ClienteExploracaoAgricola_codigoInternoCliente_Cliente FOREIGN KEY (codigoInternoCliente) REFERENCES Cliente (codigoInterno);

ALTER TABLE Morada ADD CONSTRAINT fk_Morada_codigoPostal_CodigoPostal FOREIGN KEY (codigoPostal) REFERENCES CodigoPostal (codigoPostal);
ALTER TABLE Morada ADD CONSTRAINT fk_Morada_codigoInternoCliente_Cliente FOREIGN KEY (codigoInternoCliente) REFERENCES Cliente (codigoInterno);

ALTER TABLE Encomenda ADD CONSTRAINT fk_Encomenda_codigoInternoCliente_Cliente FOREIGN KEY (codigoInternoCliente) REFERENCES Cliente (codigoInterno);
ALTER TABLE Encomenda ADD CONSTRAINT fk_Encomenda_codigoPostalMorada_numeroPortaMorada_Morada FOREIGN KEY (codigoPostalMorada, numeroPortaMorada) REFERENCES Morada (codigoPostal, numeroPorta);
ALTER TABLE Encomenda ADD CONSTRAINT fk_Encomenda_idHub_Hub FOREIGN KEY (idHub) REFERENCES Hub (idHub);

ALTER TABLE Incidente ADD CONSTRAINT fk_Incidente_numeroEncomenda_Encomenda FOREIGN KEY (numeroEncomenda) REFERENCES Encomenda (numeroEncomenda);
ALTER TABLE Incidente ADD CONSTRAINT fk_Incidente_codigoInternoCliente_Cliente FOREIGN KEY (codigoInternoCliente) REFERENCES Cliente (codigoInterno);

ALTER TABLE EstacaoMeteorologica ADD CONSTRAINT fk_EstacaoMeteorologica_idExploracaoAgricola_ExploracaoAgricola FOREIGN KEY (idExploracaoAgricola) REFERENCES ExploracaoAgricola (idExploracaoAgricola);

ALTER TABLE Sensor ADD CONSTRAINT fk_Sensor_idEstacaoMeteorologica_EstacaoMeteorologica FOREIGN KEY (idEstacaoMeteorologica) REFERENCES EstacaoMeteorologica (idEstacaoMeteorologica);
ALTER TABLE Sensor ADD CONSTRAINT fk_Sensor_tipoTipoSensor_TipoSensor FOREIGN KEY (tipoTipoSensor) REFERENCES TipoSensor (tipo);

ALTER TABLE SensorLeituras ADD CONSTRAINT fk_SensorLeituras_identificador_Sensor FOREIGN KEY (identificadorSensor) REFERENCES  Sensor (identificador);
ALTER TABLE SensorLeituras ADD CONSTRAINT fk_SensorLeituras_tipoTipoSensor_Sensor FOREIGN KEY (tipoTipoSensor) REFERENCES  TipoSensor (tipo);

ALTER TABLE Setor ADD CONSTRAINT fk_Setor_ExploracaoAgricola_idExploracaoAgricola FOREIGN KEY (idExploracaoAgricola) REFERENCES ExploracaoAgricola (idExploracaoAgricola);

ALTER TABLE Auditoria ADD CONSTRAINT fk_Auditoria_idGestorAgricola_GestorAgricola FOREIGN KEY (idGestorAgricola) REFERENCES GestorAgricola (idGestorAgricola);
ALTER TABLE Auditoria ADD CONSTRAINT fk_Auditoria_designacaoSetor_idExploracaoAgricola_Setor FOREIGN KEY (designacaoSetor, idExploracaoAgricola) REFERENCES Setor (designacao, idExploracaoAgricola);

ALTER TABLE OperacaoAgricola ADD CONSTRAINT fk_OperacaoAgricola_designacaoSetor_idExploracaoAgricola_Setor FOREIGN KEY (designacaoSetor, idExploracaoAgricola) REFERENCES Setor (designacao, idExploracaoAgricola);

ALTER TABLE FatoresAplicados ADD CONSTRAINT fk_FatoresAplicados_idOperacaoAgricola_OperacaoAgricola FOREIGN KEY (idOperacaoAgricola) REFERENCES OperacaoAgricola (idOperacaoAgricola);
ALTER TABLE FatoresAplicados ADD CONSTRAINT fk_FatoresAplicados_nomeComercialFatorProducao_FatorProducao FOREIGN KEY (nomeComercialFatorProducao) REFERENCES FatorProducao (nomeComercial);

ALTER TABLE Restricao ADD CONSTRAINT fk_Restricao_nomeComercialFatorProducao_FatorProducao FOREIGN KEY (nomeComercialFatorProducao) REFERENCES FatorProducao (nomeComercial);

ALTER TABLE RestricaoSetor ADD CONSTRAINT fk_RestricaoSetor_idRestricao_Restricao FOREIGN KEY (idRestricao) REFERENCES Restricao (idRestricao);
ALTER TABLE RestricaoSetor ADD CONSTRAINT fk_RestricaoSetor_designacaoSetor_idExploracaoAgricola FOREIGN KEY (designacaoSetor, idExploracaoAgricola) REFERENCES Setor (designacao, idExploracaoAgricola);

ALTER TABLE FatorProducaoConstituinte ADD CONSTRAINT fk_FatorProducaoConstituinte_nomeComercialFatorProducao_FatorProducao FOREIGN KEY (nomeComercialFatorProducao) REFERENCES FatorProducao (nomeComercial);
ALTER TABLE FatorProducaoConstituinte ADD CONSTRAINT fk_FatorProducaoConstituinte_nomeConstituinte_Constituinte FOREIGN KEY (nomeConstituinte) REFERENCES Constituinte (nome);

ALTER TABLE Cultura ADD CONSTRAINT fk_Cultura_designacaoSetor_idExploracaoAgricola FOREIGN KEY (designacaoSetor, idExploracaoAgricola) REFERENCES Setor (designacao, idExploracaoAgricola);

ALTER TABLE CulturaProduto ADD CONSTRAINT fk_CulturaProduto_idCultura_Cultura FOREIGN KEY (idCultura) REFERENCES Cultura (idCultura);
ALTER TABLE CulturaProduto ADD CONSTRAINT fk_CulturaProduto_idProduto_Produto FOREIGN KEY (idProduto) REFERENCES Produto (idProduto);

ALTER TABLE Safra ADD CONSTRAINT fk_Safra_idCultura_Cultura FOREIGN KEY (idCultura) REFERENCES Cultura (idCultura);

ALTER TABLE Caracteristica ADD CONSTRAINT fk_Caracteristica_idCultura_Cultura FOREIGN KEY (idCultura) REFERENCES Cultura (idCultura);

ALTER TABLE Parametro ADD CONSTRAINT fk_Parametro_idCaracteristica_Caracteristica FOREIGN KEY (idCaracteristica, idCultura) REFERENCES Caracteristica (idCaracteristica, idCultura);

/* US204 */
/* Gestor Agrícola */
INSERT INTO GestorAgricola VALUES(1);
INSERT INTO GestorAgricola VALUES(2);
INSERT INTO GestorAgricola VALUES(3);
INSERT INTO GestorAgricola VALUES(4);

/* Exploração Agrícola */
INSERT INTO ExploracaoAgricola VALUES(100, 1);
INSERT INTO ExploracaoAgricola VALUES(200, 2);
INSERT INTO ExploracaoAgricola VALUES(300, 3);
INSERT INTO ExploracaoAgricola VALUES(400, 4);

/* Input_Hub */
INSERT INTO Input_Hub VALUES('CT1;40.6389;-8.6553;C1');
INSERT INTO Input_Hub VALUES('CT2;38.0333;-7.8833;C2');
INSERT INTO Input_Hub VALUES('CT14;38.5243;-8.8926;E1');
INSERT INTO Input_Hub VALUES('CT11;39.3167;-7.4167;E2');
INSERT INTO Input_Hub VALUES('CT10;39.7444;-8.8072;P3');

/* Hub */
INSERT INTO Hub (idHub,latitude,longitude,idParticipante) VALUES('CT20', 13.0000, -23.0000, 'P8');
INSERT INTO Hub (idHub,latitude,longitude,idParticipante) VALUES('CT21', 14.0000, -54.0000, 'E9');
INSERT INTO Hub (idHub,latitude,longitude,idParticipante) VALUES('CT22', 40.0000, -8.0000, 'E7');
INSERT INTO Hub (idHub,latitude,longitude,idParticipante) VALUES('CT23', 45.4500, -8.8900, 'E8');

/* Cliente */
INSERT INTO Cliente(EMAIL, TIPO, PLAFOND, NIVELNEGOCIO, NOME, NIF, IDHUB)
VALUES('ampedro2003@gmail.com2003', 'E', 1250.50, 'C', 'Pedro Monteiro', 247677979, 'CT20');
INSERT INTO Cliente(EMAIL, TIPO, PLAFOND, NIVELNEGOCIO, NOME, NIF, IDHUB)
VALUES('joaocostaleitao@gmail.com', 'P', 850198, 'A', 'João Leitão', 324156987, 'CT20');
INSERT INTO Cliente(EMAIL, TIPO, PLAFOND, NIVELNEGOCIO, NOME, NIF, IDHUB)
VALUES('guilhermebarsousa@gmail.com', 'P', 50000, 'B', 'Guilherme Sousa', 154987325, 'CT20');
INSERT INTO Cliente(EMAIL, TIPO, PLAFOND, NIVELNEGOCIO, NOME, NIF, IDHUB)
VALUES('guga@gmail.com', 'E', 15, 'C', 'Gustavo Jorge', 783154951, 'CT21');
INSERT INTO Cliente(EMAIL, TIPO, PLAFOND, NIVELNEGOCIO, NOME, NIF, IDHUB)
VALUES('joca@gmail.com', 'P', 4988, 'B', 'João Rodrigues', 158629481, 'CT21');
INSERT INTO Cliente(EMAIL, TIPO, PLAFOND, NIVELNEGOCIO, NOME, NIF, IDHUB)
VALUES('luana@gmail.com', 'E', 168115, 'C', 'Luana Santos', 123456798, 'CT21');
INSERT INTO Cliente(EMAIL, TIPO, PLAFOND, NIVELNEGOCIO, NOME, NIF, IDHUB)
VALUES('filipa@gmail.com', 'P', 49735, 'B', 'Filipa Carvalho', 876319494, 'CT22');
INSERT INTO Cliente(EMAIL, TIPO, PLAFOND, NIVELNEGOCIO, NOME, NIF, IDHUB)
VALUES('daniela@gmail.com', 'P', 326487, 'A', 'Daniela Santos', 785315948, 'CT23');

/* Cliente - Exploracao Agricola */
INSERT INTO ClienteExploracaoAgricola VALUES(100, 1);
INSERT INTO ClienteExploracaoAgricola VALUES(100, 2);
INSERT INTO ClienteExploracaoAgricola VALUES(100, 3);
INSERT INTO ClienteExploracaoAgricola VALUES(100, 4);
INSERT INTO ClienteExploracaoAgricola VALUES(100, 5);
INSERT INTO ClienteExploracaoAgricola VALUES(100, 6);

INSERT INTO ClienteExploracaoAgricola VALUES(200, 1);
INSERT INTO ClienteExploracaoAgricola VALUES(200, 4);
INSERT INTO ClienteExploracaoAgricola VALUES(200, 5);
INSERT INTO ClienteExploracaoAgricola VALUES(200, 7);
INSERT INTO ClienteExploracaoAgricola VALUES(200, 8);

INSERT INTO ClienteExploracaoAgricola VALUES(300, 1);
INSERT INTO ClienteExploracaoAgricola VALUES(300, 2);
INSERT INTO ClienteExploracaoAgricola VALUES(300, 3);
INSERT INTO ClienteExploracaoAgricola VALUES(300, 4);
INSERT INTO ClienteExploracaoAgricola VALUES(300, 7);
INSERT INTO ClienteExploracaoAgricola VALUES(300, 8);

/* CodigoPostal */
INSERT INTO CodigoPostal VALUES('4440-687', 'Valongo');
INSERT INTO CodigoPostal VALUES('4470-370', 'Maia');
INSERT INTO CodigoPostal VALUES('4440-569', 'Maia');
INSERT INTO CodigoPostal VALUES('4470-149', 'Valongo');
INSERT INTO CodigoPostal VALUES('4450-984', 'Maia');
INSERT INTO CodigoPostal VALUES('4470-498', 'Maia');
INSERT INTO CodigoPostal VALUES('4480-149', 'Maia');
INSERT INTO CodigoPostal VALUES('4480-456', 'Valongo');
INSERT INTO CodigoPostal VALUES('4440-498', 'Maia');
INSERT INTO CodigoPostal VALUES('4470-987', 'Maia');
INSERT INTO CodigoPostal VALUES('4440-798', 'Valongo');
INSERT INTO CodigoPostal VALUES('4470-797', 'Valongo');
INSERT INTO CodigoPostal VALUES('4450-349', 'Leça da Palmeira');
INSERT INTO CodigoPostal VALUES('4470-761', 'Vila Nova da Telha');
INSERT INTO CodigoPostal VALUES('4430-156', 'Vila Nova de Gaia');
INSERT INTO CodigoPostal VALUES('4420-481', 'Valbom');


/* Morada */
INSERT INTO Morada VALUES ('4440-687', 244, 1, 'C');
INSERT INTO Morada VALUES ('4470-370', 487, 2, 'C');
INSERT INTO Morada VALUES ('4440-569', 89, 3, 'C');
INSERT INTO Morada VALUES ('4470-149', 12, 4, 'C');
INSERT INTO Morada VALUES ('4450-984', 64, 5, 'C');
INSERT INTO Morada VALUES ('4470-498', 254, 6, 'C');
INSERT INTO Morada VALUES ('4480-149', 786, 7, 'C');
INSERT INTO Morada VALUES ('4480-456', 27, 8, 'C');

INSERT INTO Morada VALUES ('4440-498', 200, 1, 'E');
INSERT INTO Morada VALUES ('4470-987', 98, 2, 'E');
INSERT INTO Morada VALUES ('4440-798', 100, 3, 'E');
INSERT INTO Morada VALUES ('4470-797', 64, 4, 'E');
INSERT INTO Morada VALUES ('4450-349', 80, 5, 'E');
INSERT INTO Morada VALUES ('4470-761', 89, 6, 'E');
INSERT INTO Morada VALUES ('4430-156', 12, 7, 'E');
INSERT INTO Morada VALUES ('4420-481', 64, 8, 'E');

/* Encomenda */
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(1, '4440-687', 244, TO_DATE('19-04-2005', 'DD-MM-YYYY'), 'P', TO_DATE('30-04-2005', 'DD-MM-YYYY'), TO_DATE('30-04-2005', 'DD-MM-YYYY'), 548.50, 'CT20');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(1, '4440-687', 244, TO_DATE('20-06-2022', 'DD-MM-YYYY'), 'E', null, TO_DATE('25-06-2022', 'DD-MM-YYYY'), 132.54, 'CT20');

INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(2, '4470-987', 98, TO_DATE('20-06-2022', 'DD-MM-YYYY'), 'R', null, null, null, 'CT20');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(2, '4470-370', 487, TO_DATE('19-04-2021', 'DD-MM-YYYY'), 'E', TO_DATE('30-04-2021', 'DD-MM-YYYY'), null, null, 'CT20');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(2, '4470-370', 487, TO_DATE('05-11-2021', 'DD-MM-YYYY'), 'P', TO_DATE('30-12-2021', 'DD-MM-YYYY'), TO_DATE('15-11-2021', 'DD-MM-YYYY'), 34.99, 'CT20');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(2, '4470-370', 487, TO_DATE('05-09-2022', 'DD-MM-YYYY'), 'E', TO_DATE('30-11-2022', 'DD-MM-YYYY'), TO_DATE('15-09-2022', 'DD-MM-YYYY'), 45.62, 'CT20');

INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(3, '4440-569', 89, TO_DATE('07-10-2019', 'DD-MM-YYYY'), 'P', null, TO_DATE('15-11-2019', 'DD-MM-YYYY'), 102.50, 'CT21');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(3, '4440-798', 100, TO_DATE('05-07-2006', 'DD-MM-YYYY'), 'E', TO_DATE('03-11-2006', 'DD-MM-YYYY'), TO_DATE('15-11-2006', 'DD-MM-YYYY'), 48.15, 'CT21');

INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(4, '4470-149', 12, TO_DATE('06-07-2010', 'DD-MM-YYYY'), 'R', null, null, null, 'CT21');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(4, '4470-149', 12, TO_DATE('19-10-2005', 'DD-MM-YYYY'), 'E', TO_DATE('13-10-2006', 'DD-MM-YYYY'), TO_DATE('07-06-2006', 'DD-MM-YYYY'), 98.99, 'CT21');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(4, '4470-149', 12, TO_DATE('21-07-1998', 'DD-MM-YYYY'), 'P', TO_DATE('05-05-1999', 'DD-MM-YYYY'), TO_DATE('10-08-1999', 'DD-MM-YYYY'), 540.20, 'CT21');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(4, '4470-797', 64, TO_DATE('09-02-2017', 'DD-MM-YYYY'), 'E', TO_DATE('29-05-2017', 'DD-MM-YYYY'), null, null, 'CT21');

INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(5, '4450-349', 80, TO_DATE('26-06-2009', 'DD-MM-YYYY'), 'E', TO_DATE('16-10-2010', 'DD-MM-YYYY'), TO_DATE('07-01-2010', 'DD-MM-YYYY'), 78.32, 'CT21');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(5, '4450-349', 80, TO_DATE('23-10-2019', 'DD-MM-YYYY'), 'P', TO_DATE('26-04-2020', 'DD-MM-YYYY'), TO_DATE('02-05-2020', 'DD-MM-YYYY'), 20.20, 'CT21');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(5, '4450-349', 80, TO_DATE('04-02-2022', 'DD-MM-YYYY'), 'E', TO_DATE('26-04-2022', 'DD-MM-YYYY'), null, null, 'CT21');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(5, '4450-984', 64, TO_DATE('23-08-2017', 'DD-MM-YYYY'), 'E', TO_DATE('03-12-2017', 'DD-MM-YYYY'), TO_DATE('01-02-2018', 'DD-MM-YYYY'), 32.51, 'CT21');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(5, '4450-984', 64, TO_DATE('16-10-2003', 'DD-MM-YYYY'), 'P', TO_DATE('07-07-2004', 'DD-MM-YYYY'), TO_DATE('08-07-2004', 'DD-MM-YYYY'), 278.05, 'CT21');

INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(6, '4470-761', 89, TO_DATE('28-09-2019', 'DD-MM-YYYY'), 'E', TO_DATE('01-12-2019', 'DD-MM-YYYY'), TO_DATE('29-01-2020', 'DD-MM-YYYY'), 64.50, 'CT22');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(6, '4470-761', 89, TO_DATE('04-12-2019', 'DD-MM-YYYY'), 'E', TO_DATE('29-06-2020', 'DD-MM-YYYY'), TO_DATE('26-12-2019', 'DD-MM-YYYY'), 12.45, 'CT22');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(6, '4470-761', 89, TO_DATE('26-10-2006', 'DD-MM-YYYY'), 'E', TO_DATE('15-02-2008', 'DD-MM-YYYY'), TO_DATE('21-02-2008', 'DD-MM-YYYY'), 20.65, 'CT22');

INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(7, '4430-156', 12, TO_DATE('14-10-1998', 'DD-MM-YYYY'), 'E', TO_DATE('27-02-1999', 'DD-MM-YYYY'), TO_DATE('06-12-1999', 'DD-MM-YYYY'), 64.50, 'CT22');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(7, '4430-156', 12, TO_DATE('29-02-1996', 'DD-MM-YYYY'), 'E', TO_DATE('01-03-1996', 'DD-MM-YYYY'), TO_DATE('01-03-1996', 'DD-MM-YYYY'), 16.05, 'CT22');

INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(8, '4420-481', 64, TO_DATE('15-11-2017', 'DD-MM-YYYY'), 'E', TO_DATE('16-11-2017', 'DD-MM-YYYY'), TO_DATE('16-11-2017', 'DD-MM-YYYY'), 154.99, 'CT23');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(8, '4480-456', 27, TO_DATE('26-03-2014', 'DD-MM-YYYY'), 'P', TO_DATE('19-04-2014', 'DD-MM-YYYY'), TO_DATE('20-04-2014', 'DD-MM-YYYY'), 28.20, 'CT23');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(8, '4420-481', 64, TO_DATE('09-02-2022', 'DD-MM-YYYY'), 'E', TO_DATE('13-04-2022', 'DD-MM-YYYY'), null, null, 'CT23');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(8, '4420-481', 64, TO_DATE('23-05-2013', 'DD-MM-YYYY'), 'E', TO_DATE('03-06-2013', 'DD-MM-YYYY'), TO_DATE('17-07-2013', 'DD-MM-YYYY'), 432.51, 'CT23');
INSERT INTO Encomenda (CODIGOINTERNOCLIENTE,CODIGOPOSTALMORADA,NUMEROPORTAMORADA,DATAENCOMENDA,ESTADO,DATAENTREGA,DATAPAGAMENTO,VALORTOTAL,IDHUB) VALUES(8, '4480-456', 27, TO_DATE('06-02-2021', 'DD-MM-YYYY'), 'P', null, TO_DATE('09-02-2021', 'DD-MM-YYYY'), 71.45, 'CT23');


/* Incidente */
INSERT INTO Incidente (NUMEROENCOMENDA,VALORDIVIDA,DATASANADO,DATAOCORRENCIA) VALUES(1, 145.30, TO_DATE('12-12-2020', 'DD-MM-YYYY'), TO_DATE('12-12-1975', 'DD-MM-YYYY'));
INSERT INTO Incidente (NUMEROENCOMENDA,VALORDIVIDA,DATASANADO,DATAOCORRENCIA) VALUES(2, 4894.95, TO_DATE('12-12-2020', 'DD-MM-YYYY'), TO_DATE('05-12-1975', 'DD-MM-YYYY'));
INSERT INTO Incidente (NUMEROENCOMENDA,VALORDIVIDA,DATASANADO,DATAOCORRENCIA) VALUES(3, 1235.15, TO_DATE('30-11-2020', 'DD-MM-YYYY'), TO_DATE('22-07-2000', 'DD-MM-YYYY'));
INSERT INTO Incidente (NUMEROENCOMENDA,VALORDIVIDA,DATASANADO,DATAOCORRENCIA) VALUES(4, 15.20, TO_DATE('30-11-2021', 'DD-MM-YYYY'), TO_DATE('23-08-2000', 'DD-MM-YYYY'));
INSERT INTO Incidente (NUMEROENCOMENDA,VALORDIVIDA,DATASANADO,DATAOCORRENCIA) VALUES(5, 950.99, TO_DATE('15-02-2022', 'DD-MM-YYYY'), TO_DATE('02-09-1999', 'DD-MM-YYYY'));
INSERT INTO Incidente (NUMEROENCOMENDA,VALORDIVIDA,DATASANADO,DATAOCORRENCIA) VALUES(6, 1250.15, TO_DATE('15-02-2022', 'DD-MM-YYYY'), TO_DATE('02-05-2021', 'DD-MM-YYYY'));
INSERT INTO Incidente (NUMEROENCOMENDA,VALORDIVIDA,DATASANADO,DATAOCORRENCIA) VALUES(7, 123.48, TO_DATE('19-09-2001', 'DD-MM-YYYY'), TO_DATE('02-01-2001', 'DD-MM-YYYY'));
INSERT INTO Incidente (NUMEROENCOMENDA,VALORDIVIDA,DATASANADO,DATAOCORRENCIA) VALUES(8, 36.48, TO_DATE('19-04-2005', 'DD-MM-YYYY'), TO_DATE('02-01-2005', 'DD-MM-YYYY'));



/* Estação Meteorológica */
INSERT INTO EstacaoMeteorologica (IDEXPLORACAOAGRICOLA) VALUES(100);
INSERT INTO EstacaoMeteorologica (IDEXPLORACAOAGRICOLA) VALUES(200);
INSERT INTO EstacaoMeteorologica (IDEXPLORACAOAGRICOLA) VALUES(300);
INSERT INTO EstacaoMeteorologica (IDEXPLORACAOAGRICOLA) VALUES(400);

/* Tipo Sensor */
INSERT INTO TipoSensor VALUES('HS', '%');
INSERT INTO TipoSensor VALUES('Pl', 'mm');
INSERT INTO TipoSensor VALUES('TS', '°C');
INSERT INTO TipoSensor VALUES('VV', 'km/h');
INSERT INTO TipoSensor VALUES('TA', '°C');
INSERT INTO TipoSensor VALUES('HA', '%');
INSERT INTO TipoSensor VALUES('PA', 'hPa');

/* Sensor */
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'HS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'HS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'HS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'HS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'HS');

INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'Pl');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'Pl');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'Pl');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'Pl');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'Pl');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'Pl');

INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'TS');

INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'VV');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'VV');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'VV');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'VV');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'VV');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'VV');

INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'VV');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'VV');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'HA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'HA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'HA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'HA');

INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'HA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(1,'HA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'HS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'HS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'HS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'HS');

INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'HS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'Pl');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'Pl');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'Pl');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'Pl');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'Pl');

INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'Pl');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TS');

INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(2,'TA');


INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TS');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TS');

INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'TA');

INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'HA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'HA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'HA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'HA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'HA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'HA');

INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'PA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'PA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'PA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'PA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'PA');
INSERT INTO Sensor (IDESTACAOMETEOROLOGICA,TIPOTIPOSENSOR) VALUES(3, 'PA');

/* Setor */
INSERT INTO Setor VALUES('A', 100, 844.0);
INSERT INTO Setor VALUES('Q', 100, 923.0);
INSERT INTO Setor VALUES('O', 100, 236.0);
INSERT INTO Setor VALUES('M', 100, 993.0);
INSERT INTO Setor VALUES('T', 100, 141.0);
INSERT INTO Setor VALUES('Y', 100, 283.0);

INSERT INTO Setor VALUES('C', 200, 407.0);
INSERT INTO Setor VALUES('D', 200, 597.0);
INSERT INTO Setor VALUES('R', 200, 957.0);
INSERT INTO Setor VALUES('S', 200, 290.0);
INSERT INTO Setor VALUES('F', 200, 752.0);
INSERT INTO Setor VALUES('V', 200, 522.0);
INSERT INTO Setor VALUES('B', 200, 892.0);

INSERT INTO Setor VALUES('H', 300, 869.0);
INSERT INTO Setor VALUES('Q', 300, 989.0);
INSERT INTO Setor VALUES('O', 300, 45.0);
INSERT INTO Setor VALUES('N', 300, 488.0);

/* Auditoria */
/* 100 */
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('27-05-2015 05:07','DD-MM-YYYY HH24:MI'),'Guga', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('28-05-2015 15:03','DD-MM-YYYY HH24:MI'),'Guga', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('29-05-2015 23:01','DD-MM-YYYY HH24:MI'),'Guga', 'UPDATE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('30-05-2015 09:02','DD-MM-YYYY HH24:MI'),'Guga', 'DELETE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('31-05-2015 17:03','DD-MM-YYYY HH24:MI'),'Guga', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('01-06-2015 01:04','DD-MM-YYYY HH24:MI'),'Guga', 'UPDATE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('02-06-2015 07:05','DD-MM-YYYY HH24:MI'),'Guga', 'DELETE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('03-06-2015 13:06','DD-MM-YYYY HH24:MI'),'Gui', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('04-06-2015 19:07','DD-MM-YYYY HH24:MI'),'Gui', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('05-06-2015 03:08','DD-MM-YYYY HH24:MI'),'Gui', 'UPDATE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('06-06-2015 09:09','DD-MM-YYYY HH24:MI'),'Gui', 'DELETE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('07-06-2015 15:10','DD-MM-YYYY HH24:MI'),'Gui', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('08-06-2015 21:11','DD-MM-YYYY HH24:MI'),'Gui', 'UPDATE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('09-06-2015 05:12','DD-MM-YYYY HH24:MI'),'Gui', 'DELETE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('10-06-2015 11:13','DD-MM-YYYY HH24:MI'),'Pedro', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('11-06-2015 17:14','DD-MM-YYYY HH24:MI'),'Pedro', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('12-06-2015 23:15','DD-MM-YYYY HH24:MI'),'Pedro', 'UPDATE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('13-06-2015 07:16','DD-MM-YYYY HH24:MI'),'Pedro', 'DELETE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('14-06-2015 13:17','DD-MM-YYYY HH24:MI'),'Pedro', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('15-06-2015 19:18','DD-MM-YYYY HH24:MI'),'Pedro', 'UPDATE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('16-06-2015 03:19','DD-MM-YYYY HH24:MI'),'Pedro', 'DELETE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('17-06-2015 09:20','DD-MM-YYYY HH24:MI'),'Leitao', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('18-06-2015 15:21','DD-MM-YYYY HH24:MI'),'Leitao', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('19-06-2015 21:22','DD-MM-YYYY HH24:MI'),'Leitao', 'UPDATE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('20-06-2015 05:23','DD-MM-YYYY HH24:MI'),'Leitao', 'DELETE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('21-06-2015 11:24','DD-MM-YYYY HH24:MI'),'Leitao', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('22-06-2015 17:25','DD-MM-YYYY HH24:MI'),'Leitao', 'UPDATE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('23-06-2015 23:26','DD-MM-YYYY HH24:MI'),'Leitao', 'DELETE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('24-06-2015 07:27','DD-MM-YYYY HH24:MI'),'Joca', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('25-06-2015 13:28','DD-MM-YYYY HH24:MI'),'Joca', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('26-06-2015 19:29','DD-MM-YYYY HH24:MI'),'Joca', 'UPDATE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('27-06-2015 03:30','DD-MM-YYYY HH24:MI'),'Joca', 'DELETE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('28-06-2015 09:31','DD-MM-YYYY HH24:MI'),'Joca', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('29-06-2015 15:32','DD-MM-YYYY HH24:MI'),'Joca', 'UPDATE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('30-06-2015 21:33','DD-MM-YYYY HH24:MI'),'Joca', 'DELETE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('01-07-2015 05:34','DD-MM-YYYY HH24:MI'),'Joca', 'INSERT');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('02-07-2015 11:35','DD-MM-YYYY HH24:MI'),'Joca', 'UPDATE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('03-07-2015 17:36','DD-MM-YYYY HH24:MI'),'Joca', 'DELETE');
INSERT INTO Auditoria(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES ('A',100,TO_DATE('04-07-2015 23:37','DD-MM-YYYY HH24:MI'),'Joca', 'INSERT');

/* 200 */

INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('C', 200, TO_DATE('10-10-2000 18:06','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('C', 200, TO_DATE('28-09-1998 11:50','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('C', 200, TO_DATE('04-09-1998 15:17','DD-MM-YYYY HH24:MI'), 'Guga', 'UPDATE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('C', 200, TO_DATE('10-07-1997 09:08','DD-MM-YYYY HH24:MI'), 'Guga', 'DELETE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('C', 200, TO_DATE('11-02-2011 08:54','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');

INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('D', 200, TO_DATE('15-02-2016 05:16','DD-MM-YYYY HH24:MI'), 'Guga', 'UPDATE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('D', 200, TO_DATE('09-06-2008 16:06','DD-MM-YYYY HH24:MI'), 'Guga', 'DELETE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('D', 200, TO_DATE('03-06-1997 10:22','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('D', 200, TO_DATE('10-03-2008 18:17','DD-MM-YYYY HH24:MI'), 'Guga', 'UPDATE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('D', 200, TO_DATE('24-09-2000 01:47','DD-MM-YYYY HH24:MI'), 'Guga', 'DELETE');

INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('R', 200, TO_DATE('12-12-2014 08:44','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('R', 200, TO_DATE('12-02-2008 13:16','DD-MM-YYYY HH24:MI'), 'Guga', 'DELETE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('R', 200, TO_DATE('05-11-2000 00:42','DD-MM-YYYY HH24:MI'), 'Guga', 'UPDATE');

INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('S', 200, TO_DATE('14-09-1998 19:42','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('S', 200, TO_DATE('21-04-2014 05:53','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');

INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('F', 200, TO_DATE('14-12-2011 20:05','DD-MM-YYYY HH24:MI'), 'Guga', 'UPDATE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('F', 200, TO_DATE('04-09-2018 13:25','DD-MM-YYYY HH24:MI'), 'Guga', 'DELETE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('F', 200, TO_DATE('01-02-1998 04:49','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');

INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('V', 200, TO_DATE('16-01-1999 15:58','DD-MM-YYYY HH24:MI'), 'Guga', 'UPDATE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('V', 200, TO_DATE('11-08-1997 18:12','DD-MM-YYYY HH24:MI'), 'Guga', 'DELETE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('V', 200, TO_DATE('07-09-2015 02:34','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('V', 200, TO_DATE('21-10-1997 19:26','DD-MM-YYYY HH24:MI'), 'Guga', 'UPDATE');

INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('B', 200, TO_DATE('18-01-2022 15:13','DD-MM-YYYY HH24:MI'), 'Guga', 'DELETE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('B', 200, TO_DATE('22-04-2017 15:44','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('B', 200, TO_DATE('29-07-1995 23:02','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');

/* 300 */
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('H', 300, TO_DATE('28-12-2017 15:03','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('H', 300, TO_DATE('19-02-2022 07:47','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('H', 300, TO_DATE('06-09-1999 01:43','DD-MM-YYYY HH24:MI'), 'Guga', 'UPDATE');

INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('Q', 300, TO_DATE('15-10-2021 19:22','DD-MM-YYYY HH24:MI'), 'Guga', 'DELETE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('Q', 300, TO_DATE('06-12-1999 04:08','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');

INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('O', 300, TO_DATE('02-02-2009 09:25','DD-MM-YYYY HH24:MI'), 'Guga', 'UPDATE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('O', 300, TO_DATE('27-05-2001 22:52','DD-MM-YYYY HH24:MI'), 'Guga', 'DELETE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('O', 300, TO_DATE('14-01-2019 04:24','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');

INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('N', 300, TO_DATE('09-10-2003 18:13','DD-MM-YYYY HH24:MI'), 'Guga', 'UPDATE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('N', 300, TO_DATE('29-10-2003 03:00','DD-MM-YYYY HH24:MI'), 'Guga', 'DELETE');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('N', 300, TO_DATE('30-10-2016 10:23','DD-MM-YYYY HH24:MI'), 'Guga', 'INSERT');
INSERT INTO Auditoria (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAHORA,USERNAME,OPERACAOESCRITA) VALUES('N', 300, TO_DATE('13-10-2017 21:58','DD-MM-YYYY HH24:MI'), 'Guga', 'UPDATE');

/* Operacão Agrícola */
/* 100 */
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('A', 100, TO_DATE('27-11-2022','DD-MM-YYYY'), TO_DATE('04-04-2023','DD-MM-YYYY'), 'Irrigação e adubação', 'A');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('A', 100, TO_DATE('18-03-2021','DD-MM-YYYY'), TO_DATE('07-03-2022','DD-MM-YYYY'), 'Irrigação e adubação', 'A');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('A', 100, TO_DATE('06-10-2022','DD-MM-YYYY'), TO_DATE('03-04-2023','DD-MM-YYYY'), 'Aplicação Fator de Produção', 'R');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('A', 100, TO_DATE('09-02-2022','DD-MM-YYYY'), TO_DATE('15-02-2023','DD-MM-YYYY'), 'Irrigação e adubação', 'R');

INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('Q', 100, TO_DATE('04-06-2021','DD-MM-YYYY'), TO_DATE('27-12-2023','DD-MM-YYYY'), 'Irrigação e adubação', 'C');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('Q', 100,TO_DATE('04-01-2023','DD-MM-YYYY'), TO_DATE('11-07-2023','DD-MM-YYYY'), 'Irrigação e adubação', 'A');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('Q', 100, TO_DATE('12-10-2022','DD-MM-YYYY'), TO_DATE('08-07-2023','DD-MM-YYYY'), 'Aplicação Fator de Produção', 'R');

INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('O', 100,TO_DATE('02-06-2022','DD-MM-YYYY'), TO_DATE('01-03-2023','DD-MM-YYYY'), 'Irrigação e adubação', 'C');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('O', 100, TO_DATE('20-11-2022','DD-MM-YYYY'), TO_DATE('18-05-2023','DD-MM-YYYY'), 'Irrigação e adubação', 'A');


/* 200 */
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('C', 200, TO_DATE('23-10-2022','DD-MM-YYYY'), TO_DATE('03-12-2022','DD-MM-YYYY'),  'Irrigação e adubação', 'C');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('C', 200, TO_DATE('08-07-2020','DD-MM-YYYY'), TO_DATE('06-07-2021','DD-MM-YYYY'),  'Aplicação Fator de Produção', 'A');

INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('R', 200, TO_DATE('04-06-2021','DD-MM-YYYY'), TO_DATE('27-12-2023','DD-MM-YYYY'), 'Irrigação e adubação', 'C');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('R', 200,TO_DATE('30-11-2021','DD-MM-YYYY'), TO_DATE('11-07-2022','DD-MM-YYYY'), 'Irrigação e adubação', 'A');

INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('D', 200,TO_DATE('30-12-2009','DD-MM-YYYY'), TO_DATE('06-02-2010','DD-MM-YYYY'), 'Irrigação e adubação', 'R');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('D', 200, TO_DATE('05-12-2007','DD-MM-YYYY'), TO_DATE('22-02-2008','DD-MM-YYYY'),  'Aplicação Fator de Produção', 'A');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('D', 200, TO_DATE('16-12-2007','DD-MM-YYYY'), TO_DATE('22-08-2008','DD-MM-YYYY'), 'Aplicação Fator de Produção', 'C');

INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('S', 200, TO_DATE('16-10-2003','DD-MM-YYYY'), TO_DATE('27-12-2004','DD-MM-YYYY'),  'Irrigação e adubação', 'C');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('S', 200, TO_DATE('13-10-1997','DD-MM-YYYY'), TO_DATE('26-08-2001','DD-MM-YYYY'),  'Irrigação e adubação', 'A');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('F', 200, TO_DATE('15-03-2000','DD-MM-YYYY'), TO_DATE('07-05-2007','DD-MM-YYYY'),  'Aplicação Fator de Produção', 'C');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO) VALUES('F', 200, TO_DATE('02-10-2016','DD-MM-YYYY'), TO_DATE('02-02-2018','DD-MM-YYYY'),  'Aplicação Fator de Produção', 'R');

/* 300 */
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('H', 300, TO_DATE('13-10-1999','DD-MM-YYYY'), TO_DATE('12-02-2001','DD-MM-YYYY'),  'Irrigação e adubação', 'A');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('H', 300, TO_DATE('26-03-2008','DD-MM-YYYY'), TO_DATE('25-05-2013','DD-MM-YYYY'),  'Irrigação e adubação', 'A');

INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('O', 300, TO_DATE('23-08-2016','DD-MM-YYYY'), TO_DATE('03-08-2018','DD-MM-YYYY'),  'Irrigação e adubação', 'C');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('O', 300, TO_DATE('14-05-2001','DD-MM-YYYY'), TO_DATE('19-12-2002','DD-MM-YYYY'),  'Irrigação e adubação', 'R');

INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('N', 300, TO_DATE('30-09-2019','DD-MM-YYYY'), TO_DATE('28-04-2020','DD-MM-YYYY'),  'Aplicação Fator de Produção', 'R');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('N', 300, TO_DATE('15-06-2008','DD-MM-YYYY'), TO_DATE('07-04-2009','DD-MM-YYYY'),  'Aplicação Fator de Produção', 'R');

/* Fator Produção */
INSERT INTO FatorProducao VALUES('Ametoctradina', 'FE', 'Jovagro');
INSERT INTO FatorProducao VALUES('Atrazina', 'PF', 'Jovagro');
INSERT INTO FatorProducao VALUES('Bentazona', 'CM', 'Escalalatina');
INSERT INTO FatorProducao VALUES('Bifenox', 'CM', 'Jovagro');
INSERT INTO FatorProducao VALUES('Boscalide', 'FE', 'Galmax');
INSERT INTO FatorProducao VALUES('Caulino', 'FE', 'Galmax');
INSERT INTO FatorProducao VALUES('Clorpirifos', 'FE', 'Agrifértil');
INSERT INTO FatorProducao VALUES('Cobre', 'FE', 'Agrifértil');
INSERT INTO FatorProducao VALUES('Colecalciferol', 'CM', 'Biofertil');
INSERT INTO FatorProducao VALUES('Dimetomorfe', 'CM', 'Bioberço');
INSERT INTO FatorProducao VALUES('Enxofre', 'FE', 'Agrifértil');
INSERT INTO FatorProducao VALUES('Imazamox', 'FE', 'Jovagro');

/* Fatores Aplicados */
INSERT INTO FatoresAplicados VALUES(1, 'Imazamox',  27.0, 'Fertirrega');
INSERT INTO FatoresAplicados VALUES(1, 'Ametoctradina', 72.0, 'Foliar');
INSERT INTO FatoresAplicados VALUES(2, 'Ametoctradina', 60.0, 'Foliar');
INSERT INTO FatoresAplicados VALUES(3, 'Boscalide', 31.0, 'Fertirrega');
INSERT INTO FatoresAplicados VALUES(4, 'Imazamox', 81.0,'Solo');
INSERT INTO FatoresAplicados VALUES(5, 'Enxofre', 35.0, 'Fertirrega');
INSERT INTO FatoresAplicados VALUES(6, 'Bifenox', 100.0, 'Fertirrega');
INSERT INTO FatoresAplicados VALUES(6, 'Ametoctradina', 100.0, 'Fertirrega');
INSERT INTO FatoresAplicados VALUES(7, 'Bifenox', 28.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(7, 'Colecalciferol', 38.0, 'Foliar');
INSERT INTO FatoresAplicados VALUES(7, 'Dimetomorfe', 98.0, 'Fertirrega');
INSERT INTO FatoresAplicados VALUES(8, 'Bifenox', 93.0, 'Fertirrega');
INSERT INTO FatoresAplicados VALUES(9, 'Colecalciferol', 65.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(10, 'Dimetomorfe', 34.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(11, 'Dimetomorfe', 56.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(12, 'Clorpirifos', 96.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(13, 'Atrazina', 28.0, 'Fertirrega');
INSERT INTO FatoresAplicados VALUES(14, 'Clorpirifos', 75.0, 'Foliar');
INSERT INTO FatoresAplicados VALUES(15, 'Colecalciferol', 91.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(16, 'Cobre', 62.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(17, 'Enxofre', 25.0, 'Fertirrega');
INSERT INTO FatoresAplicados VALUES(18, 'Cobre', 35.0, 'Foliar');
INSERT INTO FatoresAplicados VALUES(19, 'Colecalciferol', 73.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(20, 'Bifenox', 98.0, 'Foliar');
INSERT INTO FatoresAplicados VALUES(21, 'Imazamox', 36.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(22, 'Colecalciferol', 82.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(22, 'Atrazina', 61.0, 'Foliar');
INSERT INTO FatoresAplicados VALUES(23, 'Atrazina', 100.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(24, 'Ametoctradina', 36.0, 'Solo');
INSERT INTO FatoresAplicados VALUES(24, 'Colecalciferol', 19.0, 'Foliar');

/* Restricao */
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Ametoctradina', TO_DATE('09-10-2020','DD-MM-YYYY'), TO_DATE('09-04-2023','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Bentazona', TO_DATE('13-10-2014','DD-MM-YYYY'), TO_DATE('07-04-2023','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Ametoctradina', TO_DATE('29-04-2019','DD-MM-YYYY'), TO_DATE('10-09-2023','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Ametoctradina', TO_DATE('23-04-1995','DD-MM-YYYY'), TO_DATE('02-03-2023','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Colecalciferol', TO_DATE('15-01-2007','DD-MM-YYYY'), TO_DATE('03-03-2007','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Imazamox', TO_DATE('16-05-2008','DD-MM-YYYY'), TO_DATE('27-08-2023','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Dimetomorfe', TO_DATE('29-10-2005','DD-MM-YYYY'), TO_DATE('05-03-2023','DD-MM-YYYY'));

/* 200 */
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Imazamox', TO_DATE('08-06-1997','DD-MM-YYYY'), TO_DATE('28-01-2023','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Imazamox', TO_DATE('13-12-2016','DD-MM-YYYY'), TO_DATE('13-11-2019','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Colecalciferol', TO_DATE('04-06-2015','DD-MM-YYYY'), TO_DATE('29-10-2017','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Ametoctradina', TO_DATE('01-02-2002','DD-MM-YYYY'), TO_DATE('13-07-2004','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Caulino', TO_DATE('14-05-2009','DD-MM-YYYY'), TO_DATE('07-10-2010','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Caulino', TO_DATE('10-11-2016','DD-MM-YYYY'), TO_DATE('05-06-2023','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Bentazona', TO_DATE('17-12-1998','DD-MM-YYYY'), TO_DATE('23-11-2023','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Cobre', TO_DATE('25-08-2005','DD-MM-YYYY'), TO_DATE('09-01-2023','DD-MM-YYYY'));

/* 300 */
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Ametoctradina', TO_DATE('10-07-2009','DD-MM-YYYY'), TO_DATE('17-07-2010','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Enxofre', TO_DATE('25-03-1999','DD-MM-YYYY'), TO_DATE('07-11-2002','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Boscalide', TO_DATE('13-04-2004','DD-MM-YYYY'), TO_DATE('15-12-2023','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Bifenox', TO_DATE('21-06-2014','DD-MM-YYYY'), TO_DATE('01-07-2023','DD-MM-YYYY'));
INSERT INTO Restricao (NOMECOMERCIALFATORPRODUCAO,DATAINICIAL,DATAFINAL) VALUES('Imazamox', TO_DATE('07-04-2021','DD-MM-YYYY'), TO_DATE('19-06-2023','DD-MM-YYYY'));

/* Restricao Setor */
/* 100 */
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('A', 100, 1);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('A', 100, 2);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('Q', 100, 3);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('O', 100, 4);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('O', 100, 1);

/* 200 */
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('C', 200, 7);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('R', 200, 8);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('R', 200, 2);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('D', 200, 19);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('D', 200, 18);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('F', 200, 20);

/* 300 */
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('H', 300, 6);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('H', 300, 8);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('O', 300, 4);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('O', 300, 1);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('O', 300, 19);
INSERT INTO RestricaoSetor (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,IDRESTRICAO) VALUES('N', 300, 3);

/* Constituinte */
INSERT INTO Constituinte VALUES('Pentóxido de fósforo', 86.0, '%', 'E');
INSERT INTO Constituinte VALUES('Óxido clorídrico', 95.0, '%', 'E');
INSERT INTO Constituinte VALUES('Carbono de origem química', 53.0, '%', 'E');
INSERT INTO Constituinte VALUES('Ácido sulfúrico', 36.0, '%', 'S');
INSERT INTO Constituinte VALUES('Azoto orgânico', 29.0, '%', 'S');

INSERT INTO Constituinte VALUES('Carbono de origem mineral', 35.0, '%', 'E');

INSERT INTO Constituinte VALUES('Óxido de magnésio', 47.0, '%', 'E');
INSERT INTO Constituinte VALUES('Ácido fosfórico', 95.0, '%', 'E');
INSERT INTO Constituinte VALUES('Ácido nítrico', 17.0, '%', 'S');

INSERT INTO Constituinte VALUES('Óxido nítrico', 76.0, '%', 'E');
INSERT INTO Constituinte VALUES('Ácido de magnésio', 18.0, '%', 'S');

INSERT INTO Constituinte VALUES('Óxido de nitrogénio', 17.0, '%', 'S');

INSERT INTO Constituinte VALUES('Óxido de estanho', 14.0, '%', 'E');
INSERT INTO Constituinte VALUES('Óxido de alumínio', 48.0, '%', 'E');

INSERT INTO Constituinte VALUES('Óxido de ferro', 51.0, '%', 'E');

INSERT INTO Constituinte VALUES('Carbono de origem biológica', 32.0, '%', 'E');
INSERT INTO Constituinte VALUES('Acido clorídrico', 100.0, '%', 'E');

/* FatorProducaoConstituinte */
INSERT INTO FatorProducaoConstituinte VALUES ('Ametoctradina','Pentóxido de fósforo');
INSERT INTO FatorProducaoConstituinte VALUES ('Ametoctradina','Óxido clorídrico');
INSERT INTO FatorProducaoConstituinte VALUES ('Cobre','Carbono de origem química');
INSERT INTO FatorProducaoConstituinte VALUES ('Ametoctradina','Ácido sulfúrico');
INSERT INTO FatorProducaoConstituinte VALUES ('Clorpirifos','Azoto orgânico');
INSERT INTO FatorProducaoConstituinte VALUES ('Dimetomorfe','Carbono de origem mineral');
INSERT INTO FatorProducaoConstituinte VALUES ('Ametoctradina','Óxido de magnésio');
INSERT INTO FatorProducaoConstituinte VALUES ('Ametoctradina','Ácido fosfórico');
INSERT INTO FatorProducaoConstituinte VALUES ('Atrazina','Ácido nítrico');
INSERT INTO FatorProducaoConstituinte VALUES ('Atrazina','Óxido nítrico');
INSERT INTO FatorProducaoConstituinte VALUES ('Atrazina','Óxido clorídrico');
INSERT INTO FatorProducaoConstituinte VALUES ('Boscalide','Ácido de magnésio');
INSERT INTO FatorProducaoConstituinte VALUES ('Atrazina','Azoto orgânico');
INSERT INTO FatorProducaoConstituinte VALUES ('Caulino','Óxido de nitrogénio');
INSERT INTO FatorProducaoConstituinte VALUES ('Bentazona','Óxido de estanho');
INSERT INTO FatorProducaoConstituinte VALUES ('Colecalciferol','Óxido de magnésio');
INSERT INTO FatorProducaoConstituinte VALUES ('Bentazona','Óxido de nitrogénio');
INSERT INTO FatorProducaoConstituinte VALUES ('Bifenox','Ácido sulfúrico');
INSERT INTO FatorProducaoConstituinte VALUES ('Bifenox','Óxido de alumínio');
INSERT INTO FatorProducaoConstituinte VALUES ('Enxofre','Carbono de origem biológica');
INSERT INTO FatorProducaoConstituinte VALUES ('Imazamox','Óxido de ferro');




/* Cultura */
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('A', 100, 140.0, 'P', 'Tomate');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('A', 100, 453.0, 'P', 'Cebolinha');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('A', 100, 243.0, 'P', 'Chuchu');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('Q', 100, 388.0, 'P', 'Goiaba');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('Q', 100, 429.0, 'P', 'Chuchu');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('Q', 100, 280.0, 'P', 'Coco');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('O', 100, 179.0, 'P', 'Milho');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('O', 100, 100.0, 'P', 'Coco');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('M', 100, 779.0, 'P', 'Milho');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('M', 100, 163.0, 'P', 'Coco');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('T', 100, 130.0, 'P', 'Milho');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('Y', 100, 263.0, 'P', 'Coco');

/* 200 */
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('C', 200, 215.0, 'P', 'Caju');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('C', 200, 127.0, 'P', 'Couve');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('D', 200, 174.0, 'P', 'Caju');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('D', 200, 496.0, 'P', 'Melancia');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('R', 200, 149.0, 'P', 'Tomate');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('R', 200, 411.0, 'P', 'Amora');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('R', 200, 342.0, 'P', 'Tangerina');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('S', 200, 265.0, 'P', 'Quiabo');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('F', 200, 750.0, 'P', 'Tomate');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('V', 200, 160.0, 'P', 'Cenoura');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('V', 200, 408.0, 'P', 'Tomate');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('B', 200, 260.0, 'P', 'Cenoura');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('B', 200, 468.0, 'P', 'Tomate');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('B', 200, 365.0, 'P', 'Cenoura');

/* 300 */
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('H', 300, 209.0, 'P', 'Espinafre');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('H', 300, 165.0, 'P', 'Acerola');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('H', 300, 495.0, 'P', 'Abacaxi');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('Q', 300, 207.0, 'P', 'Melancia');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('Q', 300, 211.0, 'P', 'Quiabo');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('Q', 300, 284.0, 'P', 'Couve');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('Q', 300, 242.0, 'P', 'Pimentão');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('O', 300, 40.0, 'P', 'Mandioca');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('N', 300, 228.0, 'P', 'Cenoura');
INSERT INTO Cultura (DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,AREACULTURA,TIPO,CULTIVO) VALUES ('N', 300, 224.0, 'P', 'Couve-flor');


/* Produto */
INSERT INTO Produto(nome) VALUES('Tomate');
INSERT INTO Produto(nome) VALUES('Polpa de tomate');
INSERT INTO Produto(nome) VALUES('Cebolinha');
INSERT INTO Produto(nome) VALUES('Cebola');
INSERT INTO Produto(nome) VALUES('Chuchu');
INSERT INTO Produto(nome) VALUES('Cenoura');
INSERT INTO Produto(nome) VALUES('Couve');
INSERT INTO Produto(nome) VALUES('Espinafre');
INSERT INTO Produto(nome) VALUES('Pimentão');
INSERT INTO Produto(nome) VALUES('Quiabo');
INSERT INTO Produto(nome) VALUES('Abacaxi');
INSERT INTO Produto(nome) VALUES('Acerola');
INSERT INTO Produto(nome) VALUES('Melancia');
INSERT INTO Produto(nome) VALUES('Mandioca');
INSERT INTO Produto(nome) VALUES('Couve-flor');
INSERT INTO Produto(nome) VALUES('Tangerina');
INSERT INTO Produto(nome) VALUES('Goiaba');

/* ProdutoCultura */
INSERT INTO CulturaProduto VALUES(1, 1);
INSERT INTO CulturaProduto VALUES(1, 2);
INSERT INTO CulturaProduto VALUES(1, 3);
INSERT INTO CulturaProduto VALUES(2, 4);
INSERT INTO CulturaProduto VALUES(2, 5);
INSERT INTO CulturaProduto VALUES(3, 6);
INSERT INTO CulturaProduto VALUES(3, 7);
INSERT INTO CulturaProduto VALUES(4, 8);
INSERT INTO CulturaProduto VALUES(4, 9);
INSERT INTO CulturaProduto VALUES(5, 10);
INSERT INTO CulturaProduto VALUES(5, 11);
INSERT INTO CulturaProduto VALUES(6, 12);
INSERT INTO CulturaProduto VALUES(6, 13);


/* Safra */
/* 100 */
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(1, 93553.0, 478817.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(1, 37679.0, 982836.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(1, 5586.0, 206846.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(2, 30912.0, 490810.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(2, 40195.0, 696825.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(2, 68791.0, 254150.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(3, 45509.0, 495184.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(3, 6332.0, 890023.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(4, 84883.0, 152481.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(4, 57579.0, 202203.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(5, 2037.0, 700678.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(5, 31791.0, 721396.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(6, 54371.0, 197349.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(7, 23213.0, 615341.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(7, 2069.0, 538415.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(7, 91422.0, 260213.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(8, 66766.0, 423895.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(9, 16906.0, 890118.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(9, 32680.0, 144312.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(10, 48062.0, 853876.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(10, 13237.0, 390159.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(11, 89501.0, 432584.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(12, 12325.0, 620463.0);

/* 200 */
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(13, 83852.0, 505364.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(13, 38189.0, 102407.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(13, 3027.0, 681491.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(14, 90485.0, 874890.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(14, 76642.0, 250305.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(15, 9924.0, 899459.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(15, 79723.0, 447322.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(15, 26875.0, 166474.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(16, 39892.0, 532840.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(16, 54753.0, 249512.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(16, 7539.0, 160606.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(17, 97165.0, 673145.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(17, 29642.0, 947459.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(18, 48289.0, 298276.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(18, 78168.0, 777841.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(19, 1034.0, 738629.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(19, 99952.0, 969572.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(20, 19915.0, 942754.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(20, 4742.0, 362329.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(20, 19840.0, 613832.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(21, 40342.0, 686132.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(21, 22220.0, 879338.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(22, 62821.0, 746973.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(22, 7349.0, 822707.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(22, 94527.0, 172618.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(23, 69488.0, 167197.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(24, 91614.0, 706308.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(24, 41088.0, 239498.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(25, 94501.0, 685173.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(25, 41236.0, 204483.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(26, 66724.0, 125323.0);

/* 300 */
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(27, 29115.0, 841505.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(27, 92167.0, 105708.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(28, 7661.0, 759553.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(29, 29181.0, 189292.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(29, 45544.0, 345489.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(29, 7450.0, 502318.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(30, 6754.0, 544781.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(30, 19146.0, 201972.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(31, 1332.0, 636637.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(32, 5366.0, 796074.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(32, 72156.0, 789864.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(33, 27234.0, 300635.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(34, 88634.0, 674396.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(35, 10008.0, 455819.0);
INSERT INTO Safra (IDCULTURA,QUANTIDADEPRODUCAO,LUCRO) VALUES(36, 26459.0, 856585.0);

/* Característica */
/* 100 */
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(1, 'Capacidade');
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(2, 'Grelhadores');
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(3, 'Minhocas');
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(4, 'Relva');
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(5, 'Sementes');
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(6, 'Trabalhadores');

/* 200 */
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(7, 'Blocos');
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(8, 'Sistema de Rega');
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(9, 'Trabalhadores');

/* 300 */
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(10, 'Trabalhadores');
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(11, 'Blocos');
INSERT INTO Caracteristica (IDCULTURA,NOME) VALUES(12, 'Equipamento');

/* Parámetros */
/* 100 */
INSERT INTO Parametro (IDCARACTERISTICA,IDCULTURA,NOME) VALUES(1, 1, 'espécie');
INSERT INTO Parametro (IDCARACTERISTICA,IDCULTURA,NOME) VALUES(2, 2, 'tipo');
INSERT INTO Parametro (IDCARACTERISTICA,IDCULTURA,NOME) VALUES(3,3, 'custo');
INSERT INTO Parametro (IDCARACTERISTICA,IDCULTURA,NOME) VALUES(4, 4, 'nome');

/* 200 */
INSERT INTO Parametro (IDCARACTERISTICA,IDCULTURA,NOME) VALUES(5, 5, 'nome');
INSERT INTO Parametro (IDCARACTERISTICA,IDCULTURA,NOME) VALUES(6, 6, 'dimensão');
INSERT INTO Parametro (IDCARACTERISTICA,IDCULTURA,NOME) VALUES(7, 7, 'marca');

/* 300 */
INSERT INTO Parametro (IDCARACTERISTICA,IDCULTURA,NOME) VALUES(8, 8, 'Preço');


/* Relatório - valores expectávies */

/* Gestor Agrícola */
SELECT 'Gestor Agrícola' Tabela, COUNT(idGestorAgricola) Actual, 4 Expected FROM GestorAgricola;

/* Exploração Agrícola */
SELECT 'Exploração Agrícola' Tabela, COUNT(idExploracaoAgricola) Actual, 4 Expected FROM ExploracaoAgricola;

/* Cliente */
SELECT 'Cliente' Tabela, COUNT(codigoInterno) Actual, 8 Expected FROM Cliente;

/* Cliente - Exploração Agricola */
SELECT 'Cliente - Exploração Agricola' Tabela, COUNT(codigoInternoCliente) Actual, 17 Expected FROM ClienteExploracaoAgricola;

/* Incidente */
SELECT 'Incidente' Tabela, COUNT(idIncidente) Actual, 8 Expected FROM Incidente;

/* Codigo Postal */
SELECT 'Codigo Postal' Tabela, COUNT(codigoPostal) Actual, 16 Expected FROM CodigoPostal;

/* Morada */
SELECT 'Morada' Tabela, COUNT(numeroPorta) Actual, 16 Expected FROM Morada;

/* Encomenda */
SELECT 'Encomenda' Tabela, COUNT(numeroEncomenda) Actual, 27 Expected FROM Encomenda;

/* Estação Meteorológica */
SELECT 'Estação Meteorológica' Tabela, COUNT(idEstacaoMeteorologica) Actual, 4 Expected FROM EstacaoMeteorologica;

/* Tipo Sensor */
SELECT 'Tipo Sensor' Tabela, COUNT(tipo) Actual, 7 Expected FROM TipoSensor;

/* Sensor */
SELECT 'Sensor' Tabela, COUNT(identificador) Actual, 78 Expected FROM Sensor;

/* Setor */
SELECT 'Setor' Tabela, COUNT(designacao) Actual, 17 Expected FROM Setor;

/* Auditoria */
SELECT 'Registo Auditoria' Tabela, COUNT(idAuditoria) Actual, 76 Expected FROM Auditoria;

/* Operação Agrícola */
SELECT 'Operação Agrícola' Tabela, COUNT(idOperacaoAgricola) Actual, 26 Expected FROM OperacaoAgricola;

/* Fator Produção */
SELECT 'Fator Produção' Tabela, COUNT(nomeComercial) Actual, 12 Expected FROM FatorProducao;

/* Fatores Aplicados */
SELECT 'Fatores Aplicados' Tabela, COUNT(nomeComercialFatorProducao) Actual, 30 Expected FROM FatoresAplicados;

/* Restrição */
SELECT 'Restrição' Tabela, COUNT(IDRESTRICAO) Actual, 20 Expected FROM Restricao;

/* Restrição Setor */
SELECT 'Restrição Setor' Tabela, COUNT(IDRESTRICAO) Actual, 17 Expected FROM RestricaoSetor;

/* Constituinte */
SELECT 'Constituinte' Tabela, COUNT(nome) Actual, 17 Expected FROM Constituinte;

/* Fator Produção - Constituinte */
SELECT 'Fator Produção - Constituinte' Tabela, COUNT(nomeComercialFatorProducao) Actual, 21 Expected FROM FatorProducaoConstituinte;

/* Cultura */
SELECT 'Cultura' Tabela, COUNT(idCultura) Actual, 36 Expected FROM Cultura;

/* Safra */
SELECT 'Safra' Tabela, COUNT(idSafra) Actual, 69 Expected FROM Safra;

/* Característica  */
SELECT 'Característica' Tabela, COUNT(idCaracteristica) Actual, 12 Expected FROM Caracteristica;

/* Parâmetro  */
SELECT 'Parâmetro' Tabela, COUNT(idParametro) Actual, 8 Expected FROM Parametro;

/* Hub */
SELECT 'Hub' Tabela, COUNT(idHub) Actual, 4 Expected FROM Hub;

/* US205 */
-- Procedure to check if the email is valid
CREATE
OR REPLACE PROCEDURE proc_checkEmail(email_param IN CLIENTE.EMAIL%type)
    IS
    emailAlreadyExists CLIENTE.EMAIL%TYPE;
BEGIN
    -- Check if the email already is in the database
SELECT C.EMAIL
INTO emailAlreadyExists
FROM CLIENTE C
WHERE C.EMAIL = email_param;

-- If the email already exists, raise an exception
RAISE_APPLICATION_ERROR
(-20001, 'A client with this email already exists');

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL;
END;
/

-- Procedure to check if the nif is valid
CREATE
OR REPLACE PROCEDURE proc_checkNif(nifIn IN CLIENTE.NIF%type)
    IS
    nifAlreadyExists CLIENTE.NIF%TYPE;
BEGIN
    -- Check if the nif already is in the database
SELECT C.NIF
INTO nifAlreadyExists
FROM CLIENTE C
WHERE C.NIF = nifIn;

-- If the nif already exists, raise an exception
RAISE_APPLICATION_ERROR
(-20002, 'A client with this nif already exists');

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL;
END;
/

-- Function to insert a new Codigo Postal
CREATE
OR REPLACE FUNCTION func_InsertCodigoPostal(codigoPostal CODIGOPOSTAL.CODIGOPOSTAL%type,
                                              localidade CODIGOPOSTAL.LOCALIDADE%type)
    RETURN NUMBER
IS
BEGIN
INSERT INTO CODIGOPOSTAL (CODIGOPOSTAL, LOCALIDADE)
VALUES (codigoPostal, localidade);
RETURN 1;

EXCEPTION
    WHEN OTHERS THEN
        RETURN 0;
END;
/

-- Function to insert a new address
CREATE
OR REPLACE FUNCTION func_InsertAddress(codigoPostal CODIGOPOSTAL.CODIGOPOSTAL%type,
                                              localidade CODIGOPOSTAL.LOCALIDADE%type,
                                              numeroPorta MORADA.NUMEROPORTA%type,
                                              codigoInternoCliente MORADA.CODIGOINTERNOCLIENTE%type,
                                              tipoMorada MORADA.TIPOMORADA%type)
    RETURN NUMBER
IS
    result number;
BEGIN

    -- Insert the new Codigo Postal
    result := func_InsertCodigoPostal(codigoPostal, localidade);

INSERT INTO MORADA(CODIGOPOSTAL, NUMEROPORTA, CODIGOINTERNOCLIENTE, TIPOMORADA)
VALUES (codigoPostal, numeroPorta, codigoInternoCliente, tipoMorada);
RETURN 1;

EXCEPTION
    WHEN OTHERS THEN
        RETURN 0;
END;
/


-- Procedure to insert a new client
CREATE
OR REPLACE PROCEDURE proc_InsertClient(email CLIENTE.EMAIL%TYPE,
                                              tipo CLIENTE.TIPO%TYPE,
                                              plafond CLIENTE.PLAFOND%TYPE,
                                              nivelNegocio CLIENTE.NIVELNEGOCIO%TYPE,
                                              nome CLIENTE.NOME%TYPE,
                                              nif CLIENTE.NIF%TYPE)
    IS
BEGIN
INSERT INTO CLIENTE(EMAIL, TIPO, PLAFOND, NIVELNEGOCIO, NOME, NIF)
VALUES (email, tipo, plafond, nivelNegocio, nome, nif);
END;
/


-- Function to add a new client with verifications
CREATE
OR REPLACE FUNCTION func_InsertClientData(email CLIENTE.EMAIL% TYPE,
                                                 tipo CLIENTE.TIPO% TYPE,
                                                 plafond CLIENTE.PLAFOND% TYPE,
                                                 nivelNegocio CLIENTE.NIVELNEGOCIO% TYPE,
                                                 nome CLIENTE.NOME% TYPE,
                                                 nif CLIENTE.NIF% TYPE,
                                                 codigoPostalCorrespondencia CODIGOPOSTAL.CODIGOPOSTAL% TYPE,
                                                 localidadeCorrespondencia CODIGOPOSTAL.LOCALIDADE% TYPE,
                                                 numeroPortaCorrespondencia MORADA.NUMEROPORTA% TYPE,
                                                 codigoPostalEntrega CODIGOPOSTAL.CODIGOPOSTAL% TYPE,
                                                 localidadeEntrega CODIGOPOSTAL.LOCALIDADE% TYPE,
                                                 numeroPortaEntrega MORADA.NUMEROPORTA% TYPE) RETURN VARCHAR
    IS
    -- Variable to store the clientID
    clientID NUMBER;
-- Variable to store the result of the function
    result
NUMBER;
BEGIN

    -- Check if the email is valid
    proc_checkEmail
(email);
    -- Check if the nif is valid
    proc_checkNif
(nif);

    -- Insert the new client
    proc_InsertClient
(email, tipo, plafond, nivelNegocio, nome, nif);

    -- Insert the new client id in the variable
SELECT MAX(CODIGOINTERNO)
INTO clientID
FROM CLIENTE;

-- Insert the correspondence address and store the value returned by the function
result := func_InsertAddress(codigoPostalCorrespondencia, localidadeCorrespondencia, numeroPortaCorrespondencia, clientID, 'C');
    IF
result = 1 THEN

        -- Insert the delivery address and store the value returned by the function
        result := func_InsertAddress(codigoPostalEntrega, localidadeEntrega, numeroPortaEntrega, clientID, 'E');
        IF
result = 1 THEN
            RETURN CONCAT('Client inserted successfully - ClientID: ', TO_CHAR(clientID));
ELSE

            -- If the delivery address was not inserted, delete the client and the correspondence address
DELETE
FROM MORADA
WHERE CODIGOINTERNOCLIENTE = clientID
  AND TIPOMORADA = 'C';
DELETE
FROM CLIENTE
WHERE CODIGOINTERNO = clientID;
RETURN 'Error inserting the delivery address';
END IF;

ELSE
        -- If the correspondence address was not inserted, delete the client
DELETE
FROM CLIENTE
WHERE CODIGOINTERNO = clientID;
RETURN 'Error inserting the correspondence address';
END IF;

EXCEPTION
    WHEN OTHERS THEN
        RETURN SQLERRM;

END;
/

-- Procedure to insert a new order of a client
CREATE
OR REPLACE PROCEDURE proc_InsertOrder(
    id_cliente ENCOMENDA.CODIGOINTERNOCLIENTE%TYPE,
    codigoPostalMorada ENCOMENDA.CODIGOPOSTALMORADA%TYPE,
    numeroPortaMorada ENCOMENDA.NUMEROPORTAMORADA%TYPE,
    data_encomenda ENCOMENDA.DATAENCOMENDA%TYPE,
    estado_encomenda ENCOMENDA.ESTADO%TYPE,
    data_entrega ENCOMENDA.DATAENTREGA%TYPE,
    data_pagamento ENCOMENDA.DATAPAGAMENTO%TYPE,
    valor_total ENCOMENDA.VALORTOTAL%TYPE
)
    IS
BEGIN

    -- check if data_encomenda is in the last year
    IF
data_encomenda < (SYSDATE - 365) THEN
        RAISE_APPLICATION_ERROR(-20003, 'The order date is not in the last year');
END IF;

INSERT INTO Encomenda (CODIGOINTERNOCLIENTE, CODIGOPOSTALMORADA, NUMEROPORTAMORADA, DATAENCOMENDA, ESTADO, DATAENTREGA,
                       DATAPAGAMENTO, VALORTOTAL)
VALUES (id_cliente, codigoPostalMorada,
        numeroPortaMorada, data_encomenda, estado_encomenda,
        data_entrega, data_pagamento, valor_total);

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(SQLERRM);
END;
/


-- Function to get the last incident date of a client
CREATE
OR REPLACE FUNCTION func_getLastIncidentDate(client_id CLIENTE.CODIGOINTERNO%TYPE)
    RETURN VARCHAR
    IS
    LAST_INCIDENT_DATE VARCHAR(30);
BEGIN
SELECT TO_CHAR(MAX(DATAOCORRENCIA), 'DD/MM/YYYY')
INTO LAST_INCIDENT_DATE
FROM INCIDENTE
WHERE CODIGOINTERNOCLIENTE = client_id;
IF
LAST_INCIDENT_DATE IS NULL THEN
        LAST_INCIDENT_DATE := 'Sem incidentes à data';
END IF;
RETURN LAST_INCIDENT_DATE;
END;
/

-- Function to get the total payed orders of a client
CREATE
OR REPLACE FUNCTION func_getTotalPayedOrders(client_id CLIENTE.CODIGOINTERNO%TYPE)
    RETURN NUMBER
    IS
    TOTAL_PAYED_ORDERS NUMBER;
BEGIN
SELECT SUM(VALORTOTAL)
INTO TOTAL_PAYED_ORDERS
FROM ENCOMENDA
WHERE CODIGOINTERNOCLIENTE = client_id
  AND ESTADO = 'P';
RETURN TOTAL_PAYED_ORDERS;
END;
/

-- Function to get the delivered orders with pendent payment of a client
CREATE
OR REPLACE FUNCTION func_getDeliveredOrdersPendentPayment(client_id CLIENTE.CODIGOINTERNO%TYPE)
    RETURN NUMBER
    IS
    TOTAL_DELIVERED_ORDERS NUMBER;
BEGIN
SELECT SUM(VALORTOTAL)
INTO TOTAL_DELIVERED_ORDERS
FROM ENCOMENDA
WHERE CODIGOINTERNOCLIENTE = client_id
  AND DATAENTREGA IS NOT NULL
  AND ESTADO != 'P';
RETURN TOTAL_DELIVERED_ORDERS;
END;
/

-- Client view
CREATE
OR REPLACE VIEW CLIENTS_VIEW AS
SELECT C.CODIGOINTERNO                                        AS ClientID,
       C.NIVELNEGOCIO                                         AS Nível,
       func_getLastIncidentDate(C.CODIGOINTERNO)              AS ÚltimoIncidente,
       func_getTotalPayedOrders(C.CODIGOINTERNO)              AS TotalVendas,
       func_getDeliveredOrdersPendentPayment(C.CODIGOINTERNO) AS EntregasComPagamentoPendente
FROM CLIENTE C
;

-- Function that calculates the risk factor of a client
CREATE
OR REPLACE FUNCTION func_calculateRiskFactorOfAClient(clientID CLIENTE.CODIGOINTERNO%TYPE)
    RETURN NUMBER
    IS
    -- Variable that stores the total value of the incidents of the client
    totalValueOfIncidents NUMBER;
    -- Variable that stores the number of orders of the client after the last incident
    numberOfOrders
NUMBER;
    -- Variable that stores the risk factor of the client
    riskFactor
NUMBER;
BEGIN
    -- Get the total value of the incidents of the client
SELECT SUM(VALORDIVIDA)
INTO totalValueOfIncidents
FROM INCIDENTE
WHERE CODIGOINTERNOCLIENTE = clientID;

-- Get the number of orders of the client after the last incident
SELECT COUNT(*)
INTO numberOfOrders
FROM ENCOMENDA
WHERE CODIGOINTERNOCLIENTE = clientID
  AND DATAENCOMENDA > (SELECT MAX(DATAOCORRENCIA) FROM INCIDENTE WHERE ENCOMENDA.CODIGOINTERNOCLIENTE = clientID);

-- Calculate the risk factor of the client
riskFactor
:= totalValueOfIncidents / numberOfOrders;

    IF
riskFactor IS NULL THEN
        riskFactor := 0;
END IF;

    -- Return the risk factor of the client
RETURN riskFactor;

EXCEPTION
    WHEN OTHERS
        THEN
            RETURN 0;
END;
/

/* US206 */
--INSERTS(CRIAÇÃO DE DADOS)
--PROCEDURE PARA CRIAR UM SETOR
CREATE OR REPLACE PROCEDURE proc_CreateSector(
    designacao_parameter IN Setor.designacao%TYPE,
    idExploracaoAgricola_parameter IN Setor.idExploracaoAgricola%TYPE,
    areaTotal_parameter IN Setor.AreaTotal%TYPE
)
AS
BEGIN
INSERT INTO Setor (designacao, idExploracaoAgricola, AreaTotal)
VALUES (designacao_parameter, idExploracaoAgricola_parameter, areaTotal_parameter);
END;
/

--PROCEDURE PARA CRIAR UMA CULTURA
CREATE OR REPLACE PROCEDURE proc_CreateCulture(
    designacaoSetor_parameter IN Cultura.designacaoSetor%TYPE,
    idExploracaoAgricola_parameter IN Cultura.idExploracaoAgricola%TYPE,
    areaCultura_parameter IN Cultura.AreaCultura%TYPE,
    tipo_parameter IN Cultura.tipo%TYPE,
    cultivo_parameter IN Cultura.cultivo%TYPE
)
AS
BEGIN
INSERT INTO Cultura ( designacaoSetor, idExploracaoAgricola, AreaCultura, tipo, cultivo)
VALUES ( designacaoSetor_parameter, idExploracaoAgricola_parameter, areaCultura_parameter, tipo_parameter, cultivo_parameter);
END;
/

--PROCEDURE PARA CRIAR UMA CARACTERÍSTICA
CREATE OR REPLACE PROCEDURE proc_CreateCharacteristic(
    idCultura_parameter IN Caracteristica.idCultura%TYPE,
    nome_parameter IN  Caracteristica.nome%TYPE
)
AS
BEGIN
INSERT INTO Caracteristica (idCultura, nome)
VALUES ( idCultura_parameter, nome_parameter);
END;
/

--PROCEDURE PARA CRIAR UM PARÂMETRO
CREATE OR REPLACE PROCEDURE proc_CreateParameter(
    idCaracteristica_parameter IN Parametro.idCaracteristica%TYPE,
    idCultura_parameter IN Parametro.idCultura%TYPE,
    nome_parameter IN Parametro.nome%TYPE
)
AS
BEGIN
INSERT INTO Parametro (idCaracteristica, idCultura, nome)
VALUES (idCaracteristica_parameter, idCultura_parameter, nome_parameter);
END;
/

--SELECTS (LISTAGEM DE DADOS PELAS ORDENS PEDIDAS)
--FUNÇÃO PARA RECEBER OS SETORES POR ORDEM ALFABÉTICA
CREATE OR REPLACE FUNCTION func_GetSectorAlphabetically(
    idExploracaoAgricola_parameter IN Setor.idExploracaoAgricola%TYPE
)
RETURN SYS_REFCURSOR
IS sector_cursor SYS_REFCURSOR;

BEGIN
OPEN sector_cursor FOR
SELECT *
FROM Setor
WHERE idExploracaoAgricola = idExploracaoAgricola_parameter
ORDER BY designacao;

RETURN sector_cursor;
END;
/

--PROCEDURE PARA LISTAR OS SETORES POR ORDEM ALFABÉTICA
CREATE OR REPLACE PROCEDURE proc_ListSectorsAlphabetically(
    idExploracaoAgricola_parameter IN Setor.idExploracaoAgricola%TYPE
)
IS
    sector_cursor SYS_REFCURSOR;
    designacao Setor.designacao%TYPE;
    idExploracaoAgricola Setor.idExploracaoAgricola%TYPE;
    areaTotal Setor.AreaTotal%TYPE;
BEGIN
    sector_cursor := func_GetSectorAlphabetically(idExploracaoAgricola_parameter);
    LOOP
FETCH sector_cursor INTO designacao, idExploracaoAgricola, areaTotal;
        EXIT WHEN sector_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Designação: ' || designacao || ' | ID da Exploração Agrícola- ' || idExploracaoAgricola || ' | Área Total- ' || areaTotal);
END LOOP;
CLOSE sector_cursor;
END;
/

--FUNÇÃO PARA RECEBER OS SETORES POR ORDEM CRESCENTE DE ÁREA
CREATE OR REPLACE FUNCTION func_GetSectorByAreaAsc(
    idExploracaoAgricola_parameter IN Setor.idExploracaoAgricola%TYPE
)
RETURN SYS_REFCURSOR
IS sector_cursor SYS_REFCURSOR;
BEGIN
OPEN sector_cursor FOR
SELECT *
FROM Setor
WHERE idExploracaoAgricola = idExploracaoAgricola_parameter
ORDER BY areaTotal;

RETURN sector_cursor;
END;
/

--PROCEDURE PARA LISTAR OS SETORES POR ORDEM CRESCENTE DE ÁREA
CREATE OR REPLACE PROCEDURE proc_ListSectorByAreaAsc(
    idExploracaoAgricola_parameter IN Setor.idExploracaoAgricola%TYPE
)
IS
    sector_cursor SYS_REFCURSOR;
    designacao Setor.designacao%TYPE;
    idExploracaoAgricola Setor.idExploracaoAgricola%TYPE;
    areaTotal Setor.AreaTotal%TYPE;
BEGIN
    sector_cursor := func_GetSectorByAreaAsc(idExploracaoAgricola_parameter);
    LOOP
FETCH sector_cursor INTO designacao, idExploracaoAgricola, areaTotal;
        EXIT WHEN sector_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Designação: ' ||designacao || ' | ID da Exploração Agrícola- ' || idExploracaoAgricola || ' | Área Total- ' || areaTotal);
END LOOP;
CLOSE sector_cursor;
END;
/

--FUNÇÃO PARA RECEBER OS SETORES POR ORDEM DECRESCENTE DE ÁREA
CREATE OR REPLACE FUNCTION func_GetSectorByAreaDesc(
    idExploracaoAgricola_parameter IN Setor.idExploracaoAgricola%TYPE
)
RETURN SYS_REFCURSOR
IS sector_cursor SYS_REFCURSOR;
BEGIN
OPEN sector_cursor FOR
SELECT *
FROM Setor
WHERE idExploracaoAgricola = idExploracaoAgricola_parameter
ORDER BY areaTotal DESC;

RETURN sector_cursor;
END;
/
--PROCEDURE PARA LISTAR OS SETORES POR ORDEM DECRESCENTE DE ÁREA
CREATE OR REPLACE PROCEDURE proc_ListSectorsByAreaDesc(
    idExploracaoAgricola_parameter IN Setor.idExploracaoAgricola%TYPE
)
    IS
    sector_cursor SYS_REFCURSOR;
    designacao Setor.designacao%TYPE;
    idExploracaoAgricola Setor.idExploracaoAgricola%TYPE;
    areaTotal Setor.AreaTotal%TYPE;
BEGIN
    sector_cursor := func_GetSectorByAreaDesc(idExploracaoAgricola_parameter);
    LOOP
FETCH sector_cursor INTO designacao, idExploracaoAgricola, areaTotal;
        EXIT WHEN sector_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Designação: ' ||designacao || ' | ID da Exploração Agrícola- ' || idExploracaoAgricola || ' | Área Total- ' || areaTotal);
END LOOP;
CLOSE sector_cursor;
END;
/

--PROCEDURE PARA LISTAR OS SETORES POR ORDEM DECRESCENTE DE ÁREA
CREATE OR REPLACE PROCEDURE proc_ListSectorsByAreaDesc(
    idExploracaoAgricola_parameter IN Setor.idExploracaoAgricola%TYPE
)
    IS
    sector_cursor SYS_REFCURSOR;
    designacao Setor.designacao%TYPE;
    idExploracaoAgricola Setor.idExploracaoAgricola%TYPE;
    areaTotal Setor.AreaTotal%TYPE;
BEGIN
    sector_cursor := func_GetSectorByAreaDesc(idExploracaoAgricola_parameter);
    LOOP
FETCH sector_cursor INTO designacao, idExploracaoAgricola, areaTotal;
        EXIT WHEN sector_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Designação: ' ||designacao || ' | ID da Exploração Agrícola- ' || idExploracaoAgricola || ' | Área Total- ' || areaTotal);
END LOOP;
CLOSE sector_cursor;
END;
/

--FUNÇÃO PARA RECEBER OS SETORES ORDENADOS POR CULTURA OU TIPO DE CULTURA
CREATE OR REPLACE FUNCTION func_GetSectorByCultureOrCultureType(
    idExploracaoAgricola_parameter IN Setor.idExploracaoAgricola%TYPE
)
RETURN SYS_REFCURSOR
IS sectorCulture_cursor SYS_REFCURSOR;

BEGIN
OPEN sectorCulture_cursor FOR
SELECT
    c.idCultura, c.designacaoSetor, c.idExploracaoAgricola, c.areaCultura, c.tipo, c.cultivo FROM Cultura c
                                                                                                      INNER JOIN Setor s ON c.designacaoSetor = s.designacao
WHERE s.idExploracaoAgricola = idExploracaoAgricola_parameter
ORDER BY c.tipo, c.cultivo;
RETURN sectorCulture_cursor;
END;
/
--PROCEDURE PARA LISTAR OS SETORES ORDENADOS POR CULTURA OU TIPO DE CULTURA
CREATE OR REPLACE PROCEDURE proc_ListSectorsByCultureOrCultureType(
    idExploracaoAgricola_parameter IN Setor.idExploracaoAgricola%TYPE
)
IS
    sectorCulture_cursor SYS_REFCURSOR;
    idCultura Cultura.idCultura%TYPE;
    designacaoSetor Cultura.designacaoSetor%TYPE;
    idExploracaoAgricola Cultura.idExploracaoAgricola%TYPE;
    areaCultura Cultura.areaCultura%TYPE;
    tipo Cultura.tipo%TYPE;
    cultivo Cultura.cultivo%TYPE;
BEGIN
    sectorCulture_cursor := func_GetSectorByCultureOrCultureType(idExploracaoAgricola_parameter);
    LOOP
FETCH sectorCulture_cursor INTO idCultura, designacaoSetor, idExploracaoAgricola, areaCultura, tipo, cultivo;
        EXIT WHEN sectorCulture_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID Cultura- ' || idCultura || ' | Designação do Setor- ' || designacaoSetor || ' | ID da Exploração Agrícola- ' || idExploracaoAgricola || ' | Área da Cultura- ' || areaCultura || ' | Tipo de Cultura- ' || tipo || ' | Cultura- ' || cultivo);
END LOOP;
CLOSE sectorCulture_cursor;
END;
/

/* US207 */
CREATE OR REPLACE PROCEDURE proc_get_sector_rentability_exploration_profit (
IDEXPLORACAOAGRICOLA_CHECK IN Setor.IDEXPLORACAOAGRICOLA%Type,
CULTIVO_CHECK IN Cultura.CULTIVO%Type
)

IS

CURSOR sector_cursor IS
SELECT DESIGNACAO, AREACULTURA, IDSAFRA
FROM Setor s
         INNER JOIN Cultura c
                    ON s.designacao = c.designacaosetor
         INNER JOIN Safra saf
                    ON c.IDCULTURA = saf.IDCULTURA
WHERE c.cultivo = CULTIVO_CHECK
  AND s.IDEXPLORACAOAGRICOLA = IDEXPLORACAOAGRICOLA_CHECK
ORDER BY (saf.LUCRO/c.AREACULTURA) DESC;

p_sector_designacao Setor.designacao%Type;
p_cultura_area Cultura.AREACULTURA%Type;
p_safra_id Safra.IDSAFRA%Type;

BEGIN
OPEN sector_cursor;
LOOP
FETCH sector_cursor INTO p_sector_designacao, p_cultura_area, p_safra_id;
    EXIT WHEN sector_cursor%NotFound;
        dbms_output.put_line('-----------------------------------------');
        dbms_output.put_line('Designação Setor --> ' ||  p_sector_designacao);
        dbms_output.put_line('Área Cultura --> ' ||  p_cultura_area);
        dbms_output.put_line('ID Safra --> ' ||  p_safra_id);
        dbms_output.put_line('-----------------------------------------');
END LOOP;
CLOSE sector_cursor;
END;
/

-- The next procedure is used to replace the profit with the quantity

CREATE OR REPLACE PROCEDURE proc_get_sector_rentability_exploration_quantity (
IDEXPLORACAOAGRICOLA_CHECK IN Setor.IDEXPLORACAOAGRICOLA%Type,
CULTIVO_CHECK IN Cultura.CULTIVO%Type
)

IS

CURSOR sector_cursor IS
SELECT DESIGNACAO, AREACULTURA, IDSAFRA
FROM Setor s
         INNER JOIN Cultura c
                    ON s.designacao = c.designacaosetor
         INNER JOIN Safra saf
                    ON c.IDCULTURA = saf.IDCULTURA
WHERE c.cultivo = CULTIVO_CHECK
  AND s.IDEXPLORACAOAGRICOLA = IDEXPLORACAOAGRICOLA_CHECK
ORDER BY (saf.QUANTIDADEPRODUCAO/c.AREACULTURA) DESC;

p_sector_designacao Setor.designacao%Type;
p_cultura_area Cultura.AREACULTURA%Type;
p_safra_id Safra.IDSAFRA%Type;
p_setor_lucro_safra NUMBER;

BEGIN
OPEN sector_cursor;
LOOP
FETCH sector_cursor INTO p_sector_designacao, p_cultura_area, p_safra_id;
    EXIT WHEN sector_cursor%NotFound;
        dbms_output.put_line('-----------------------------------------');
        dbms_output.put_line('Designação Setor --> ' ||  p_sector_designacao);
        dbms_output.put_line('ID Safra --> ' ||  p_safra_id);
        dbms_output.put_line('Área Cultura --> ' ||  p_cultura_area);
        dbms_output.put_line('-----------------------------------------');
END LOOP;
CLOSE sector_cursor;
END;
/

/* US208 */
CREATE OR REPLACE PROCEDURE procCreateConstituinte (
    nome_param IN Constituinte.nome%TYPE,
    quantidade_param IN Constituinte.quantidade%TYPE,
    unidade_param IN Constituinte.unidade%TYPE,
    categoria_param IN Constituinte.categoria%TYPE
)
    IS


BEGIN
    /* INSERT Constituinte */
INSERT INTO Constituinte values (nome_param, quantidade_param, unidade_param, categoria_param);

dbms_output.put_line('O Constituinte - ' || nome_param || ' - foi criado com sucesso!');

EXCEPTION

    WHEN others THEN
        dbms_output.put_line('Não foi possível adicionar o Constituinte, - ' || nome_param);
END;
/

-- Other Procedure

CREATE OR REPLACE PROCEDURE procCreateFatorProducao (
    nomeComercial_param IN FatorProducao.nomeComercial%TYPE,
    tipo_param IN FatorProducao.tipo%TYPE,
    fornecedor_param IN FatorProducao.fornecedor%TYPE
)
IS

    is_inserted FatorProducao.nomeComercial%TYPE;

BEGIN
INSERT INTO FatorProducao values (nomeComercial_param, tipo_param, fornecedor_param) returning NomeComercial into is_inserted;

dbms_output.put_line('O Fator de Produção, - ' || is_inserted || ' - foi criado com sucesso!');

EXCEPTION

    WHEN others THEN
        dbms_output.put_line('Não foi possível adicionar o Fator de Produção - ' || nomeComercial_param);
END;
/

-- Other Procedure

CREATE OR REPLACE PROCEDURE procCreateFatorProducaoConstituinte (
    nomeComercial_param IN FatorProducao.nomeComercial%TYPE,
    nomeConstituinte_param IN Constituinte.nome%TYPE
)
    IS
BEGIN
    /* INSERT FatorProducaoConstituinte */
INSERT INTO FatorProducaoConstituinte values (nomeComercial_param, nomeConstituinte_param);

dbms_output.put_line('A ficha Ténica foi criada com sucesso');

EXCEPTION

    WHEN others THEN
        dbms_output.put_line('Não foi possível criar a ficha tecnica');
END;
/

/* US209 */
-- The following code has the instructions to be run in order to satisfy the requisits of US209

/*1. Um utilizador pode registar pedidos de um determinado cliente (encomendas), solicitando que
a entrega seja efetuada em determinado endereço que será a morada de entrega do cliente, por
defeito, podendo, no entanto, ser indicada uma morada específica para cada encomenda, em
determinada data. Verificar plafond do cliente.*/

CREATE OR REPLACE PROCEDURE proc_register_package (
  cod_client IN Encomenda.codigoInternoCliente%type,
  data_Encomenda IN Encomenda.dataEncomenda%type,
  price IN Encomenda.valorTotal%type) IS

  p_codigo_postal_def Encomenda.codigoPostalMorada%type;
  p_nr_porta_def Encomenda.numeroPortaMorada%type;
  p_plafond_cliente Cliente.plafond%type;
BEGIN
SELECT plafond INTO p_plafond_cliente
FROM Cliente c
WHERE c.codigoInterno = cod_client;

IF price <= p_plafond_cliente THEN

SELECT codigoPostal INTO p_codigo_postal_def
FROM Morada
WHERE codigoInternoCliente = cod_client AND tipoMorada = 'E';

SELECT numeroPorta INTO p_nr_porta_def
FROM Morada
WHERE codigoInternoCliente = cod_client AND tipoMorada = 'E';

INSERT INTO Encomenda (codigoInternoCliente, codigoPostalMorada, numeroPortaMorada, dataEncomenda, estado)
VALUES (cod_client, p_codigo_postal_def, p_nr_porta_def, data_Encomenda, 'R');
dbms_output.put_line('Package registered for user: ' || cod_client);
ELSE
    dbms_output.put_line('### Client plafond does not allow registration of package ###');
END IF;
END;
/




/*2. Um utilizador pode registar a entrega de uma encomenda numa determinada data. Presume-se
que a encomenda seja entregue na totalidade; não há suporte para entregas parciais.*/

CREATE OR REPLACE PROCEDURE proc_update_delivery_date (
    date_delivered IN Encomenda.dataEntrega%type,
    package_number IN Encomenda.numeroEncomenda%type) IS

    p_date_registry Encomenda.dataEncomenda%type;
BEGIN
SELECT dataEncomenda INTO p_date_registry
FROM Encomenda
WHERE numeroEncomenda = package_number;
IF date_delivered <= SYSDATE AND date_delivered >= p_date_registry THEN
UPDATE Encomenda
SET dataEntrega = date_delivered
WHERE numeroEncomenda = package_number;
dbms_output.put_line('### Delivery Date has been updated ###');
ELSE
    dbms_output.put_line('### Invalid delivery date ###');
END IF;
END;
/


/*3. Um utilizador pode registar o pagamento de uma encomenda numa determinada data.*/

CREATE OR REPLACE PROCEDURE proc_update_payment_date (
    date_paid IN Encomenda.dataPagamento%type,
    package_number IN Encomenda.numeroEncomenda%type) IS

    p_date_registry Encomenda.dataEncomenda%type;
BEGIN
SELECT dataEncomenda INTO p_date_registry
FROM Encomenda
WHERE numeroEncomenda = package_number;

IF date_paid <= SYSDATE AND  date_paid >= p_date_registry THEN
UPDATE Encomenda
SET dataPagamento = date_paid
WHERE numeroEncomenda = package_number;
dbms_output.put_line('### Payment Date has been updated ###');
ELSE
    dbms_output.put_line('### Invalid payment date ###');
END IF;
END;
/


/*4. Posso listar encomendas por estado (registada, entregue, paga) – data de registo da encomenda,
cliente, número da encomenda, valor total e estado.*/

--listagem por estado
CREATE OR REPLACE PROCEDURE proc_list_package_by_state (
    state IN Encomenda.estado%type) IS

p_date_registry Encomenda.dataEncomenda%type;
p_package_number Encomenda.numeroEncomenda%type;
p_cod_client Encomenda.codigoInternoCliente%type;
p_valor_total Encomenda.valorTotal%type;

CURSOR n_encomendas IS
SELECT numeroEncomenda
FROM Encomenda
WHERE estado = state;

BEGIN
dbms_output.put_line('LISTAGEM DE ENCOMENDAS POR ESTADO: ' || state);
OPEN n_encomendas;
LOOP
FETCH n_encomendas INTO p_package_number;
    EXIT WHEN n_encomendas%notfound;
SELECT dataEncomenda INTO p_date_registry
FROM Encomenda
WHERE Encomenda.numeroEncomenda = p_package_number;
SELECT codigoInternoCliente INTO p_cod_client
FROM Encomenda
WHERE Encomenda.numeroEncomenda = p_package_number;
SELECT valorTotal INTO p_valor_total
FROM Encomenda
WHERE Encomenda.numeroEncomenda = p_package_number;
dbms_output.put_line('-----------------------------------------');
        dbms_output.put_line('Data de registo da Encomenda -->' || p_date_registry);
        dbms_output.put_line('Número de Cliente ------------->' || p_cod_client);
        dbms_output.put_line('Número da Encomenda ----------->' || p_package_number);
        dbms_output.put_line('Valor Total da Encomenda ------>' || p_valor_total);
        dbms_output.put_line('-----------------------------------------');
END LOOP;
CLOSE n_encomendas;
END;
/

/* US210 */
/* Critério de Aceitação 1 */

CREATE OR REPLACE FUNCTION func_inserirOperacaoAgricola (
  p_designacaoSetor IN OperacaoAgricola.designacaoSetor%TYPE,
  p_idExploracaoAgricola IN OperacaoAgricola.idExploracaoAgricola%TYPE,
  p_dataAgendada IN OperacaoAgricola.dataAgendada%TYPE,
  p_tipo IN OperacaoAgricola.tipo%TYPE
) RETURN VARCHAR

IS

valido INTEGER;

BEGIN
  /* Verificar se existe a combinação do setor e exploração inseridos por parâmetro */
SELECT COUNT(*) INTO valido
FROM SETOR s
WHERE s.designacao = p_designacaoSetor AND s.idExploracaoAgricola = p_idExploracaoAgricola;

IF valido = 0 THEN
    RETURN 'Erro: Combinação Inválida da Designação do Setor e do ID da Exploração Agrícola.';
ELSE

    /* Verificar se a data para a qual a operação foi agendada, é superior à data no momento da criação */
    IF p_dataAgendada < SYSDATE THEN
        RETURN 'Erro: Data Agendada Inválida (Data Agendada deve ser maior do que a data no momento da criação).';

    /* Se tudo estiver ok, podemos adicionar a operação agrícola */
ELSE
        INSERT INTO OperacaoAgricola (designacaoSetor, idExploracaoAgricola, dataAgendada, tipo, estadoOperacao)
        VALUES (p_designacaoSetor, p_idExploracaoAgricola, p_dataAgendada, p_tipo, 'P');
RETURN 'Inserção da Operação Agrícola com Sucesso.';
END IF;
END IF;
END;
/

/* Critério de Aceitação 2 */

CREATE OR REPLACE FUNCTION func_inserirFatorAplicado (
  p_id_operacao_agricola IN FatoresAplicados.idOperacaoAgricola%TYPE,
  p_nome_comercial_fator_producao IN FatoresAplicados.nomeComercialFatorProducao%TYPE,
  p_quantidade_aplicada IN FatoresAplicados.quantidadeAplicada%TYPE,
  p_forma_aplicacao IN FatoresAplicados.formaAplicacao%TYPE
)

RETURN VARCHAR
IS
  designacao_setor Setor.designacao%TYPE;
  id_exploracao_agricola Setor.idExploracaoAgricola%TYPE;
  id_restricao Restricao.idRestricao%TYPE;
  data_inicial Restricao.dataInicial%TYPE;
  data_final Restricao.dataFinal%TYPE;
  nome_comercial_fator_producao FatoresAplicados.nomeComercialFatorProducao%TYPE;
  estado_operacao OperacaoAgricola.estadoOperacao%TYPE;
  valido INTEGER;

CURSOR id_restricao_nome_comercial_cursor IS
SELECT r.idRestricao, r.nomeComercialFatorProducao, r.dataInicial, r.dataFinal
FROM Restricao r
         INNER JOIN RestricaoSetor rs
                    ON r.idRestricao = rs.idRestricao
         INNER JOIN Setor s
                    ON s.designacao = rs.designacaoSetor AND s.idExploracaoAgricola = rs.idExploracaoAgricola
         INNER JOIN OperacaoAgricola oa
                    ON oa.designacaoSetor = s.designacao AND oa.idExploracaoAgricola = s.idExploracaoAgricola
WHERE oa.idOperacaoAgricola = p_id_operacao_agricola;

BEGIN
OPEN id_restricao_nome_comercial_cursor;
LOOP
FETCH id_restricao_nome_comercial_cursor INTO id_restricao, nome_comercial_fator_producao, data_inicial, data_final;
    EXIT WHEN id_restricao_nome_comercial_cursor%NotFound;

        /* Se encontrarmos uma restrição a decorrer, cujo produto restringido, seja o mesmo que pretendemos adicionar, não o permitir */
        IF nome_comercial_fator_producao = p_nome_comercial_fator_producao AND SYSDATE > data_inicial AND SYSDATE < data_final THEN
            CLOSE id_restricao_nome_comercial_cursor;
RETURN 'Fator producao ' || p_nome_comercial_fator_producao || ' está presente na restrição com id ' || id_restricao || '.';
END IF;
END LOOP;
CLOSE id_restricao_nome_comercial_cursor;
/* Verificar se aquele fator não se encontra já adicionado à operação */
SELECT COUNT(*) INTO valido
FROM FatoresAplicados fa
WHERE fa.idOperacaoAgricola = p_id_operacao_agricola AND fa.nomeComercialFatorProducao = p_nome_comercial_fator_producao;

IF valido > 0 THEN
    RETURN 'Já existe um fator produção com esse nome na operação.';

    /* Garantir que o estado da operação não é cancelado ou realizado */
ELSE
SELECT estadoOperacao INTO estado_operacao FROM OperacaoAgricola WHERE idOperacaoAgricola = p_id_operacao_agricola;
IF estado_operacao = 'P' OR estado_operacao = 'A' THEN
            INSERT INTO FatoresAplicados (idOperacaoAgricola, nomeComercialFatorProducao, quantidadeAplicada, formaAplicacao)
            VALUES (p_id_operacao_agricola, p_nome_comercial_fator_producao, p_quantidade_aplicada, p_forma_aplicacao);
RETURN 'Fator de producao adicionado com sucesso.';
ELSE
        RETURN 'Operação já foi realizada ou cancelada.';
END IF;
END IF;
END;
/

/* Critério de Aceitação 3 */

CREATE OR REPLACE PROCEDURE proc_listarOperacoesRestringidas

AS

/* Contém todas as explorações agrícolas */
  CURSOR exploracao_cursor IS
SELECT idExploracaoAgricola
FROM ExploracaoAgricola;

/* Contém todas as operações que se realizam na próxima semana, e além disso se essas contém algum fator restringido */
CURSOR operacao_cursor (p_id_exploracao_agricola IN ExploracaoAgricola.idExploracaoAgricola%TYPE) IS
SELECT oa.idOperacaoAgricola, oa.designacaoSetor, oa.estadoOperacao, fa.nomeComercialFatorProducao
FROM OperacaoAgricola oa
         INNER JOIN Setor s
                    ON s.designacao = oa.designacaoSetor AND s.idExploracaoAgricola = oa.idExploracaoAgricola
         INNER JOIN FatoresAplicados fa
                    ON fa.idOperacaoAgricola = oa.idOperacaoAgricola
         INNER JOIN RestricaoSetor rs
                    ON rs.designacaoSetor = s.designacao
         INNER JOIN Restricao r
                    ON r.idRestricao = rs.idRestricao AND r.nomeComercialFatorProducao = fa.nomeComercialFatorProducao
WHERE oa.idExploracaoAgricola = p_id_exploracao_agricola AND (oa.estadoOperacao = 'A' OR oa.estadoOperacao = 'P') AND oa.dataAgendada BETWEEN SYSDATE AND SYSDATE + 7;

v_id_operacao OperacaoAgricola.idOperacaoAgricola%TYPE;
  v_designacao_setor OperacaoAgricola.designacaoSetor%TYPE;
  v_estado_operacao OperacaoAgricola.estadoOperacao%TYPE;
  v_nome_comercial_fator FatoresAplicados.nomeComercialFatorProducao%TYPE;

BEGIN
FOR exploracao_record IN exploracao_cursor
    LOOP
      OPEN operacao_cursor (exploracao_record.idExploracaoAgricola);
      LOOP
FETCH operacao_cursor INTO v_id_operacao, v_designacao_setor, v_estado_operacao, v_nome_comercial_fator;
        EXIT WHEN operacao_cursor%NotFound;

        /* Apresentar todas as operações restringidas e os fatores que o causam */
        dbms_output.put_line('OperacaoAgricola ID: ' || v_id_operacao || ', DesignacaoSetor: ' || v_designacao_setor || ', EstadoOperacao: ' || v_estado_operacao || ', NomeComercialFator: ' || v_nome_comercial_fator);
END LOOP;
CLOSE operacao_cursor;
END LOOP;
END;
/

/* Critério de Aceitação 4 */

CREATE OR REPLACE PROCEDURE proc_listarRestricoesAtivas (
  p_designacao_setor IN Setor.designacao%TYPE,
  p_id_exploracao_agricola IN Setor.idExploracaoAgricola%TYPE,
  p_data_verificar DATE
)

IS
  id_restricao Restricao.idRestricao%TYPE;
  data_inicial Restricao.dataInicial%TYPE;
  data_final Restricao.dataFinal%TYPE;
  nome_comercial_fator_producao FatoresAplicados.nomeComercialFatorProducao%TYPE;
  valido INTEGER;

/* Obter todas as restrições ativas para aquele setor naquela exploração */
CURSOR id_restricao_nome_comercial_cursor IS
SELECT r.idRestricao, r.nomeComercialFatorProducao, r.dataInicial, r.dataFinal
FROM Restricao r
         INNER JOIN RestricaoSetor rs
                    ON r.idRestricao = rs.idRestricao
         INNER JOIN Setor s
                    ON s.designacao = rs.designacaoSetor AND s.idExploracaoAgricola = rs.idExploracaoAgricola
WHERE rs.designacaoSetor = p_designacao_setor AND rs.idExploracaoAgricola = p_id_exploracao_agricola;

BEGIN

    /* Verificar que a junção da designação e do ID da exploração, existem */
SELECT COUNT(*) INTO valido
FROM SETOR s
WHERE s.designacao = p_designacao_setor AND s.idExploracaoAgricola = p_id_exploracao_agricola;

IF valido = 0 THEN
    dbms_output.put_line('Erro: Designação do Setor e ID da Exploração Agrícola não existem');

ELSE
    dbms_output.put_line('Lista de Restrições Ativas');
OPEN id_restricao_nome_comercial_cursor;
LOOP
FETCH id_restricao_nome_comercial_cursor INTO id_restricao, nome_comercial_fator_producao, data_inicial, data_final;
    EXIT WHEN id_restricao_nome_comercial_cursor%NotFound;

    /* Garantir que a data parametrizada encaixa nos limites da restrição */
        IF p_data_verificar > data_inicial AND p_data_verificar < data_final THEN
            dbms_output.put_line('-----------------------------------------');
            dbms_output.put_line('ID     --> ' ||  id_restricao);
            dbms_output.put_line('Nome   --> ' ||  nome_comercial_fator_producao);
            dbms_output.put_line('Data I --> ' ||  data_inicial);
            dbms_output.put_line('Data F --> ' ||  data_final);
            dbms_output.put_line('-----------------------------------------');
END IF;
END LOOP;
CLOSE id_restricao_nome_comercial_cursor;
END IF;
END;
/

/* Critério de Aceitação 5 */

CREATE OR REPLACE PROCEDURE listar_OperacoesPlaneadas (
  p_id_exploracao_agricola IN Setor.idExploracaoAgricola%TYPE
)

IS
  designacao_setor Setor.designacao%TYPE;
  data_agendada OperacaoAgricola.dataAgendada%TYPE;
  tipo_operacao OperacaoAgricola.tipo%TYPE;
  valid INTEGER;

  /* Todas as operações planeadas ou atualizadas por setor */
CURSOR operacoes_exploracao_cursor IS
SELECT oa.dataAgendada, oa.designacaoSetor, oa.tipo
FROM Setor s
         INNER JOIN OperacaoAgricola oa
                    ON s.designacao = oa.designacaoSetor
WHERE oa.idExploracaoAgricola = p_id_exploracao_agricola AND (oa.estadoOperacao = 'P' OR oa.estadoOperacao = 'A')
ORDER BY (oa.dataAgendada) ASC;

BEGIN
    /* Garantir que aquela exploração existe */
SELECT COUNT(*) INTO valid
FROM ExploracaoAgricola ea
WHERE ea.idExploracaoAgricola = p_id_exploracao_agricola;

IF valid = 0 THEN
    dbms_output.put_line('Id da Exploração Agrícola Inválido.');
ELSE
    dbms_output.put_line('Lista de Operações Planeadas por Setor: ');
OPEN operacoes_exploracao_cursor;
LOOP
FETCH operacoes_exploracao_cursor INTO data_agendada, designacao_setor, tipo_operacao;
    EXIT WHEN operacoes_exploracao_cursor%NotFound;
            dbms_output.put_line('-----------------------------------------');
            dbms_output.put_line('Designacao Setor --> ' ||  designacao_setor);
            dbms_output.put_line('Data Agendada    --> ' ||  data_agendada);
            dbms_output.put_line('Tipo             --> ' ||  tipo_operacao);
            dbms_output.put_line('-----------------------------------------');
END LOOP;
CLOSE operacoes_exploracao_cursor;
END IF;
END;
/

/* US211 */
/* FUNÇÃO QUE PERMITE CANCELAR UMA OPERAÇÃO QUE AINDA NÃO TENHA SIDO REALIZADA */
CREATE OR REPLACE FUNCTION func_CancelOperation(
    idOperacaoAgricola_param IN OPERACAOAGRICOLA.idOperacaoAgricola%TYPE
) RETURN VARCHAR IS
    state CHAR(1);
BEGIN
    /* GUARDAR NA VARIÁVEL O ESTADO DA OPERAÇÃO */
SELECT estadoOperacao INTO state FROM OPERACAOAGRICOLA WHERE idOperacaoAgricola = idOperacaoAgricola_param;
/* SE O ESTADO FOR DIFERENTE 'R' (REALIZADO) E NÃO TIVER SIDO JÁ CANCELADA, ENTÃO O ESTADO PASSA PARA CANCELADO. 'C'.  */
IF state != 'R' AND state != 'C' THEN
UPDATE OPERACAOAGRICOLA SET estadoOperacao = 'C' WHERE idOperacaoAgricola = idOperacaoAgricola_param;
RETURN 'Operação Cancelada.';
/* NO CASO DE A OPERAÇÃO JÁ TER SIDO REALIZADA OU CANCELADA, APARECE A SEGUINTE MENSAGEM. */
ELSE
        RETURN 'Não é Possível Cancelar a Operação Agrícola, uma vez que já foi Realizada ou Cancelada.';
END IF;
END;
/

/* FUNÇÃO QUE PERMITE ATUALIZAR A DATA AGENDADA DE UMA OPERAÇÃO QUE AINDA NÃO TENHA SIDO REALIZADA */
CREATE OR REPLACE FUNCTION func_UpdateOperationDate(
    idOperacaoAgricola_param IN OPERACAOAGRICOLA.idOperacaoAgricola%TYPE,
    dataAgendada_param IN OPERACAOAGRICOLA.dataAgendada%TYPE

) RETURN VARCHAR IS
    state CHAR(1);
BEGIN
    /* GUARDAR NA VARIÁVEL O ESTADO DA OPERAÇÃO */
SELECT estadoOperacao INTO state FROM OPERACAOAGRICOLA WHERE idOperacaoAgricola = idOperacaoAgricola_param;
/* SE O ESTADO FOR DIFERENTE DE 'R' E DE 'C', ENTÃO ATUALIZAR OS PARÂMETROS DA OPERAÇÃO. */
IF state != 'R' AND state != 'C' THEN
        /* ATUALIZAR A OPERAÇÃO EM QUALQUER UM DOS SEUS PARÂMETROS */
UPDATE OPERACAOAGRICOLA SET dataAgendada = dataAgendada_param, estadoOperacao = 'A' WHERE idOperacaoAgricola = idOperacaoAgricola_param;
RETURN 'Data da Operação Atualizada.';
/* NO CASO DE A OPERAÇÃO JÁ TER SIDO REALIZADA, APARECE A SEGUINTE MENSAGEM. */
ELSE
        RETURN 'Não é Possível Atualizar a Operação Agrícola, uma vez que já foi Realizada ou Cancelada.';
END IF;
END;
/


/* FUNÇÃO QUE PERMITE ATUALIZAR O TIPO DE UMA OPERAÇÃO QUE AINDA NÃO TENHA SIDO REALIZADA */
CREATE OR REPLACE FUNCTION func_UpdateOperationType(
    idOperacaoAgricola_param IN OPERACAOAGRICOLA.idOperacaoAgricola%TYPE,
    tipoOperacao_param IN OPERACAOAGRICOLA.tipo%TYPE
) RETURN VARCHAR IS
    state CHAR(1);
BEGIN
    /* GUARDAR NA VARIÁVEL O ESTADO DA OPERAÇÃO */
SELECT estadoOperacao INTO state FROM OPERACAOAGRICOLA WHERE idOperacaoAgricola = idOperacaoAgricola_param;
/* SE O ESTADO FOR DIFERENTE DE 'R' E DE 'C', ENTÃO ATUALIZAR OS PARÂMETROS DA OPERAÇÃO. */
IF state != 'R' AND state != 'C' THEN
        /* ATUALIZAR A OPERAÇÃO EM QUALQUER UM DOS SEUS PARÂMETROS */
UPDATE OPERACAOAGRICOLA SET tipo = tipoOperacao_param, estadoOperacao = 'A' WHERE idOperacaoAgricola = idOperacaoAgricola_param;
RETURN 'Tipo de Operação Atualizado.';
/* NO CASO DE A OPERAÇÃO JÁ TER SIDO REALIZADA, APARECE A SEGUINTE MENSAGEM. */
ELSE
        RETURN 'Não é Possível Atualizar a Operação Agrícola, uma vez que já foi Realizada ou Cancelada.';
END IF;
END;
/

/* FUNÇÃO QUE PERMITE ATUALIZAR A QUANTIDADEAPLICADA A UMA OPERAÇÃO QUE AINDA NÃO TENHA SIDO REALIZADA */
CREATE OR REPLACE FUNCTION func_UpdateOperationAppliedQuantity(
    idOperacaoAgricola_param IN OPERACAOAGRICOLA.idOperacaoAgricola%TYPE,
    nomeComercialFatorProducao_param IN FatoresAplicados.nomeComercialFatorProducao%TYPE,
    quantidadeAplicada_param IN FATORESAPLICADOS.quantidadeAplicada%TYPE
) RETURN VARCHAR IS
    state CHAR(1);
BEGIN
    /* GUARDAR NA VARIÁVEL O ESTADO DA OPERAÇÃO */
SELECT estadoOperacao INTO state FROM OPERACAOAGRICOLA WHERE idOperacaoAgricola = idOperacaoAgricola_param;
/* SE O ESTADO FOR DIFERENTE DE 'R' E DE 'C', ENTÃO ATUALIZAR OS PARÂMETROS DA OPERAÇÃO. */
IF state != 'R' AND state != 'C' THEN
        /* ATUALIZAR A OPERAÇÃO EM QUALQUER UM DOS SEUS PARÂMETROS */
UPDATE FATORESAPLICADOS SET quantidadeAplicada = quantidadeAplicada_param WHERE idOperacaoAgricola = idOperacaoAgricola_param AND nomeComercialFatorProducao = nomeComercialFatorProducao_param;
UPDATE OPERACAOAGRICOLA SET estadoOperacao = 'A' WHERE idOperacaoAgricola = idOperacaoAgricola_param;
RETURN 'Quantidade Aplicada à Operação Agrícola Atualizada.';
/* NO CASO DE A OPERAÇÃO JÁ TER SIDO REALIZADA, APARECE A SEGUINTE MENSAGEM. */
ELSE
        RETURN 'Não é Possível Atualizar a Operação Agrícola, uma vez que já foi Realizada ou Cancelada.';
END IF;
END;
/

/* FUNÇÃO QUE PERMITE ATUALIZAR A FORMA DE APLICAÇÃO A UMA OPERAÇÃO QUE AINDA NÃO TENHA SIDO REALIZADA */
CREATE OR REPLACE FUNCTION func_UpdateOperationApplicationForm(
    idOperacaoAgricola_param IN OPERACAOAGRICOLA.idOperacaoAgricola%TYPE,
    nomeComercialFatorProducao_param IN FatoresAplicados.nomeComercialFatorProducao%TYPE,
    formaAplicacao_param IN FATORESAPLICADOS.formaAplicacao%TYPE
) RETURN VARCHAR IS
    state CHAR(1);
BEGIN
    /* GUARDAR NA VARIÁVEL O ESTADO DA OPERAÇÃO */
SELECT estadoOperacao INTO state FROM OPERACAOAGRICOLA WHERE idOperacaoAgricola = idOperacaoAgricola_param;
/* SE O ESTADO FOR DIFERENTE DE 'R' E DE 'C', ENTÃO ATUALIZAR OS PARÂMETROS DA OPERAÇÃO. */
IF state != 'R' AND state != 'C' THEN
        /* ATUALIZAR A OPERAÇÃO EM QUALQUER UM DOS SEUS PARÂMETROS */
UPDATE FATORESAPLICADOS SET formaAplicacao = formaAplicacao_param WHERE idOperacaoAgricola = idOperacaoAgricola_param AND nomeComercialFatorProducao = nomeComercialFatorProducao_param;
UPDATE OPERACAOAGRICOLA SET estadoOperacao = 'A' WHERE idOperacaoAgricola = idOperacaoAgricola_param;
RETURN 'Forma de Aplicação à Operação Agrícola Atualizada.';
/* NO CASO DE A OPERAÇÃO JÁ TER SIDO REALIZADA, APARECE A SEGUINTE MENSAGEM. */
ELSE
        RETURN 'Não é Possível Atualizar a Operação Agrícola, uma vez que já foi Realizada ou Cancelada.';
END IF;
END;
/

/* FUNÇÃO QUE PERMITE CRIAR UM FATOR APLICADO A UMA OPERAÇÃO */
CREATE OR REPLACE FUNCTION func_createFatorAplicado (
    idOperacaoAgricola_param IN FatoresAplicados.idOperacaoAgricola%TYPE,
    nomeComercialFatorProducao_param IN FatoresAplicados.nomeComercialFatorProducao%TYPE,
    quantidadeAplicada_param IN FatoresAplicados.quantidadeAplicada%TYPE,
    formaAplicacao_param IN FatoresAplicados.formaAplicacao%TYPE
)

    RETURN VARCHAR
    IS
    designacao_setor Setor.designacao%TYPE;
    id_exploracao_agricola Setor.idExploracaoAgricola%TYPE;
    id_restricao Restricao.idRestricao%TYPE;
    data_inicial Restricao.dataInicial%TYPE;
    data_final Restricao.dataFinal%TYPE;
    nome_comercial_fator_producao FatoresAplicados.nomeComercialFatorProducao%TYPE;
    estado_operacao OperacaoAgricola.estadoOperacao%TYPE;
    checker INTEGER;

CURSOR idRestricaoNomeComercial_cursor IS
SELECT R.idRestricao, R.nomeComercialFatorProducao, R.dataInicial, R.dataFinal
FROM Restricao R
         INNER JOIN RestricaoSetor RS
                    ON r.idRestricao = RS.idRestricao
         INNER JOIN Setor S
                    ON S.designacao = RS.designacaoSetor AND S.idExploracaoAgricola = RS.idExploracaoAgricola
         INNER JOIN OperacaoAgricola O
                    ON O.designacaoSetor = S.designacao AND O.idExploracaoAgricola = S.idExploracaoAgricola
WHERE O.idOperacaoAgricola = idOperacaoAgricola_param;

BEGIN
OPEN idRestricaoNomeComercial_cursor;
LOOP
FETCH idRestricaoNomeComercial_cursor INTO id_restricao, nome_comercial_fator_producao, data_inicial, data_final;
        EXIT WHEN idRestricaoNomeComercial_cursor%NotFound;
        IF nome_comercial_fator_producao = nomeComercialFatorProducao_param AND SYSDATE > data_inicial AND SYSDATE < data_final THEN
            CLOSE idRestricaoNomeComercial_cursor;
RETURN 'Fator producao ' || nomeComercialFatorProducao_param || ' is present in Restricao with id ' || id_restricao;
END IF;
END LOOP;
CLOSE idRestricaoNomeComercial_cursor;
/* VERIFICAR SE A COMBINAÇÃO ENTRE A DESIGNAÇÃO DO SETOR E O ID DA OPERAÇÃO AGRÍCOLA EXISTE NA TABELA SETOR */
SELECT COUNT(*) INTO checker
FROM FatoresAplicados FA
WHERE FA.idOperacaoAgricola = idOperacaoAgricola_param AND FA.nomeComercialFatorProducao = nomeComercialFatorProducao_param;

IF checker > 0 THEN
        RETURN 'Já existe um Fator de Produção com esse Nome Comercial para a mesma Operação Agrícola.';

ELSE
SELECT estadoOperacao INTO estado_operacao FROM OperacaoAgricola WHERE idOperacaoAgricola = idOperacaoAgricola_param;
IF estado_operacao != 'R' AND estado_operacao != 'C' THEN
            INSERT INTO FatoresAplicados (idOperacaoAgricola, nomeComercialFatorProducao, quantidadeAplicada, formaAplicacao)
            VALUES (idOperacaoAgricola_param, nomeComercialFatorProducao_param, quantidadeAplicada_param, formaAplicacao_param);
RETURN 'Fator de Produção Introduzido com Sucesso na Operação Agrícola.';
ELSE
            RETURN 'Operação foi Cancelada ou já estava Realizada.';
END IF;
END IF;
END;
/

/* FUNÇÃO QUE PERMITE REMOVER UM FATOR APLICADO A UMA OPERAÇÃO */
CREATE OR REPLACE FUNCTION func_removeFatorAplicado(
    idOperacaoAgricola_param IN FatoresAplicados.idOperacaoAgricola%TYPE,
    nomeComercialFatorProducao_param IN FatoresAplicados.nomeComercialFatorProducao%TYPE
)
    RETURN VARCHAR
    IS
    estado_operacao OperacaoAgricola.estadoOperacao%TYPE;
    checker INTEGER;

BEGIN
    /* VERIFICAR SE A COMBINAÇÃO ENTRE A DESIGNAÇÃO DO SETOR E O ID DA OPERAÇÃO AGRÍCOLA EXISTE NA TABELA SETOR */
SELECT COUNT(*) INTO checker
FROM FatoresAplicados F
WHERE F.idOperacaoAgricola = idOperacaoAgricola_param AND F.nomeComercialFatorProducao = nomeComercialFatorProducao_param;

IF checker = 0 THEN
        RETURN 'Não Existe um Fator Aplicado com esse Nome Comercial para a Operação Agrícola Especificada.';

ELSE
SELECT estadoOperacao INTO estado_operacao FROM OperacaoAgricola WHERE idOperacaoAgricola = idOperacaoAgricola_param;
IF estado_operacao != 'R' AND estado_operacao != 'C' THEN
DELETE FROM FatoresAplicados
WHERE idOperacaoAgricola = idOperacaoAgricola_param AND nomeComercialFatorProducao = nomeComercialFatorProducao_param;
RETURN 'Fator de Produção removido com sucesso, desta Operação Agrícola.';
ELSE
            RETURN 'Operação já foi Cancelada ou Realizada.';
END IF;
END IF;
END;
/

/* US212 */
-- The following code has the instructions to be run in order to satisfy the requisits of US212

/* 1. Function that returns the nth tuple of table input_sensor */

CREATE OR REPLACE FUNCTION func_get_nth_element (input IN input_sensor.input_string%type, n IN NUMBER)
    RETURN VARCHAR
    IS
    f_return VARCHAR(25);
BEGIN
    f_return:= null;
CASE n
    WHEN 1 THEN f_return:= SUBSTR(input,0,5);
WHEN 2 THEN f_return:= SUBSTR(input,6,2);
WHEN 3 THEN f_return:= SUBSTR(input,8,3);
WHEN 4 THEN f_return:= SUBSTR(input,11,10);
WHEN 5 THEN f_return:= SUBSTR(input,21,5);
ELSE return null;
END CASE;

return f_return;
END;
/

/*2 - Procedure that makes the transfer between table input_sensor and
  table Sensor with all verifications and constraints mentioned in the
  assignment*/

CREATE OR REPLACE PROCEDURE proc_transfer_sensor_inputs
IS
p_input INPUT_SENSOR.INPUT_STRING%type;
p_sensor_id SENSORLEITURAS.IDENTIFICADORSENSOR%type;
p_sensor_type SENSORLEITURAS.TIPOTIPOSENSOR%type;
p_read_value SENSORLEITURAS.VALORLIDO%type;
p_reference_value SENSORLEITURAS.REFERENCIA%type;
p_time_of_reading SENSORLEITURAS.INSTANTELEITURA%type;

p_total_read NUMBER;
p_total_transfered NUMBER;
p_total_error NUMBER;

p_unique_checker NUMBER;
p_unique_checker2 NUMBER;

CURSOR input_list IS
SELECT INPUT_STRING
FROM INPUT_SENSOR;

BEGIN
SELECT COUNT(*) INTO p_total_read
FROM INPUT_SENSOR;

p_total_error:=0;
    p_total_transfered:=0;

OPEN input_list;
LOOP
FETCH input_list INTO p_input;
        EXIT WHEN input_list%notfound;
        p_sensor_id:= to_number(func_get_nth_element(p_input,1));
        p_sensor_type:= func_get_nth_element(p_input,2);
        p_read_value:= to_number(func_get_nth_element(p_input,3));
        p_reference_value:= to_number(func_get_nth_element(p_input,4));
        p_time_of_reading:= func_get_nth_element(p_input,5);

SELECT COUNT(*) INTO p_unique_checker
FROM SENSORLEITURAS sl
WHERE sl.referencia = p_reference_value;

SELECT COUNT(*) INTO p_unique_checker2
FROM SENSOR s
WHERE s.identificador = p_sensor_id;

IF p_sensor_type NOT IN ('HS', 'Pl', 'TS', 'VV', 'TA', 'HA', 'PA') OR p_unique_checker != 0 OR p_unique_checker2 = 0 OR p_read_value > 100 THEN
            p_total_error:= p_total_error + 1;
ELSE
            INSERT INTO SensorLeituras (identificadorSensor, tipoTipoSensor, valorLido, referencia, instanteLeitura) VALUES (p_sensor_id, p_sensor_type, p_read_value, p_reference_value, p_time_of_reading);
            p_total_transfered:= p_total_transfered + 1;

DELETE FROM INPUT_SENSOR
WHERE INPUT_STRING = p_input;

END IF;
END LOOP;
INSERT INTO LOGLEITURASINPUT (dataleitura, registoslidos, registosinseridos, registoscomerro) VALUES (SYSDATE, p_total_read, p_total_transfered, p_total_error);
DBMS_OUTPUT.PUT_LINE('------------------------------------');
    DBMS_OUTPUT.PUT_LINE('### SENSOR INPUT TRANSFER REPORT ###');
    DBMS_OUTPUT.PUT_LINE('Number of inputs read ----------> ' || p_total_read);
    DBMS_OUTPUT.PUT_LINE('Number of inputs transferred ---> ' || p_total_transfered);
    DBMS_OUTPUT.PUT_LINE('Number of inputs with errors ---> ' || p_total_error);
    DBMS_OUTPUT.PUT_LINE('------------------------------------');
END;
/
-- this procedure's output can be ignored in an aplicational situation, the database persists all the output information on a table made for it LogLeiturasInput

/* US213 */
CREATE OR REPLACE TRIGGER trig_registOperationOnOperacaoAgricola
AFTER INSERT OR UPDATE OR DELETE ON operacaoagricola
    FOR EACH ROW
DECLARE
operationType AUDITORIA.OPERACAOESCRITA%TYPE;
	designacaoSetorV OPERACAOAGRICOLA.DESIGNACAOSETOR%TYPE;
	idExploracaoAgricolaV OPERACAOAGRICOLA.IDEXPLORACAOAGRICOLA%TYPE;
BEGIN

	operationType :=
	CASE
		WHEN INSERTING THEN 'INSERT'
		WHEN UPDATING THEN 'UPDATE'
		ELSE 'DELETE'
END;

	IF INSERTING OR UPDATING THEN
		designacaoSetorV := :NEW.designacaosetor;
	   idExploracaoAgricolaV := :NEW.idExploracaoAgricola;
ELSE
		designacaoSetorV := :OLD.designacaosetor;
	    idExploracaoAgricolaV := :OLD.idExploracaoAgricola;
END IF;

INSERT INTO auditoria (designacaoSetor, idExploracaoAgricola, dataHora, username, operacaoEscrita)
VALUES (designacaoSetorV, idExploracaoAgricolaV, SYSDATE, USER, operationType);
END;
/

CREATE OR REPLACE PROCEDURE PROC_CHECKAUDITLOG(designacaoSetor_in IN AUDITORIA.DESIGNACAOSETOR%TYPE,
                                                    idExploracaoAgricola_in IN AUDITORIA.IDEXPLORACAOAGRICOLA%TYPE)
IS
    auditLog_cursor          SYS_REFCURSOR;
    designacaoSetor_out      AUDITORIA.DESIGNACAOSETOR%TYPE;
    idExploracaoAgricola_out AUDITORIA.IDEXPLORACAOAGRICOLA%TYPE;
    idregisto_out            AUDITORIA.IDAUDITORIA%TYPE;
    dataHora_out             AUDITORIA.DATAHORA%TYPE;
    username_out             AUDITORIA.USERNAME%TYPE;
    operecao_out             AUDITORIA.OPERACAOESCRITA%TYPE;


BEGIN

OPEN auditLog_cursor FOR
SELECT IDAUDITORIA, DESIGNACAOSETOR, IDEXPLORACAOAGRICOLA, DATAHORA, USERNAME, OPERACAOESCRITA
FROM Auditoria
WHERE designacaoSetor = designacaoSetor_in
  AND idExploracaoAgricola = idExploracaoAgricola_in
ORDER BY dataHora DESC;


LOOP
FETCH auditLog_cursor INTO idregisto_out, designacaoSetor_out, idExploracaoAgricola_out, dataHora_out, username_out, operecao_out;
        EXIT WHEN auditLog_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Registo ID: ' || idregisto_out ||
                             ' | ID da Exploração Agrícola: ' || idExploracaoAgricola_out ||
                             ' | Setor: ' || designacaoSetor_out ||
                             ' | User: ' || username_out ||
                             ' | Data: ' || TO_CHAR(dataHora_out, 'DD-MON-YYYY HH24:MI:SS') ||
                             ' | Operacao: ' || operecao_out);
END LOOP;
CLOSE auditLog_cursor;
END;
/

/* US215 */
/* 1- It is possible to execute a procedure for the table hub to be updated whenever table input_hub is updated */

CREATE OR REPLACE PROCEDURE proc_UpdateHub
IS
    /* VARIÁVEIS DE APOIO À EXECUÇÃO DO PROCEDIMENTO */
    cursorToInsert SYS_REFCURSOR;
    idHubVar  Hub.idHub%TYPE;
    latitudeVar Hub.latitude%TYPE;
    longitudeVar Hub.longitude%TYPE;
    idParticipanteVar Hub.idParticipante%TYPE;
    stringVar        Input_Hub.input_string%TYPE;
    alreadyExists    NUMBER;
BEGIN
    /* CURSOR QUE PERMITE EXECUTAR O PROCEDIMENTO PARA TODOS OS INPUTS */
OPEN cursorToInsert FOR
SELECT input_string FROM Input_Hub;
LOOP
FETCH cursorToInsert Into stringVar;
    EXIT WHEN cursorToInsert%NOTFOUND;

    /* AS LINHAS QUE SE SEGUEM ATÉ À INSTRUÇÃO DE SELECT PERMITEM DIVIDIR A STRING POR ";" E GUARDAR CADA VALOR NA RESPETIVA VARIÁVEL */
    idHubVar := TO_CHAR(REGEXP_SUBSTR(stringVar, '[^;]+', 1, 1));
    latitudeVar := TO_NUMBER(REGEXP_SUBSTR(stringVar, '[^;]+', 1, 2));
    longitudeVar := TO_NUMBER(REGEXP_SUBSTR(stringVar, '[^;]+', 1, 3));
    idParticipanteVar := TO_CHAR(REGEXP_SUBSTR(stringVar, '[^;]+', 1, 4));
    /* ATRIBUIÇÃO QUE PERMITE VERIFICAR SE UM DADO HUB JÁ SE ENCONTRA REGISTADO NA BASE DE DADOS */
SELECT COUNT(*) INTO alreadyExists FROM Hub WHERE idHub = idHubVar;

/* SE O HUB NÃO SE ENCONTRAR REGISTADO E NÃO FOR DO TIPO 'C' NO PARÂMETRO IDPARTICIPANTE, EXECUTAR O CÓDIGO QUE SE SEGUE */
IF alreadyExists = 0 AND idParticipanteVar NOT LIKE 'C%' THEN
        INSERT INTO Hub VALUES (idHubVar, TO_NUMBER(latitudeVar), TO_NUMBER(longitudeVar), idParticipanteVar);
        dbms_output.put_line('Hub ' || idHubVar || ' inserido com sucesso.');
    /* SE O HUB JÁ SE ENCONTRAR REGISTADO, IMPRIMIR A SEGUINTE MENSAGEM. */
ELSE IF alreadyExists <> 0 THEN
        dbms_output.put_line('O Hub com o id ' || idHubVar || ' já existe .');
    /* SE O HUB FOR DO TIPO 'C', IMPRIMIR A SEGUINTE MENSAGEM. */
ELSE IF idParticipanteVar LIKE 'C%' THEN
        dbms_output.put_line('O Hub com o id ' || idHubVar || ' não pode ser inserido por se tratar de um Cliente.');
END IF;
END IF;
END IF;
END LOOP;
    /* EXCEÇÃO PARA QUANDO NÃO EXISTE INFORMAÇÃO A DAR */
EXCEPTION WHEN NO_DATA_FOUND THEN
    dbms_output.put_line('Não há dados para inserir.');
END;
/


/* 2- I can run a procedure that updates the default hub of a client */

CREATE OR REPLACE PROCEDURE proc_UpdateDefaultHub (
    cod_client IN Cliente.codigoInterno%type,
    cod_hub IN Hub.idHub%type) IS

    validation NUMBER;
    validation2 NUMBER;

BEGIN
SELECT count(*) INTO validation
FROM CLIENTE
WHERE CODIGOINTERNO = cod_client;

SELECT count(*) INTO validation2
FROM Hub
WHERE idHub = cod_hub;

IF validation = 1 AND validation2 = 1 THEN
UPDATE CLIENTE
SET idHub = cod_hub
WHERE codigoInterno = cod_client;
dbms_output.put_line('### Default hub for client has been updated ###');
ELSE
            dbms_output.put_line('### Client or Hub has not been found ###');
END IF;
END;
/


/* 3- When an Order (Encomenda) is placed, a hub different than the default one may be indicated as a pick up place.
        This hub should be valid (present in table HUB) */

/* This procedure is very similar to the one in US209, as far as registering a package is concerned;
   In this case, we will not use the values of "Morada" in the package registration, rather, we will use the hubs as a
   reference place for pickup*/

CREATE OR REPLACE PROCEDURE proc_RegisterPackageWithHub (
    cod_client IN Encomenda.codigoInternoCliente%type,
    data_Encomenda IN Encomenda.dataEncomenda%type,
    price IN Encomenda.valorTotal%type,
    cod_hub IN Hub.idHub%type) IS

    p_plafond_cliente Cliente.plafond%type;
    validation NUMBER;

BEGIN

SELECT plafond INTO p_plafond_cliente
FROM Cliente c
WHERE c.codigoInterno = cod_client;

SELECT COUNT(*) INTO validation
FROM Hub h
WHERE h.idHub = cod_hub;


IF price <= p_plafond_cliente AND validation = 1 THEN

        INSERT INTO Encomenda (codigoInternoCliente, dataEncomenda, estado, idHub)
        VALUES (cod_client, data_Encomenda, 'R', cod_hub);
        dbms_output.put_line('Package registered for user: ' || cod_client);
        dbms_output.put_line('Pick-up registered for hub: ' || cod_hub);
ELSE
        dbms_output.put_line('### An error occurred, package could not be  ');
END IF;

END;
/

/*DEMONSTRATIONS*/
BEGIN
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE('*                 US205 - Demonstration                    *');
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Inserting a new client into the database|********');
end;
/

-- ************************************************************
-- *  Function: func_InsertClientData
-- *  Description: Inserts a new client into the database
-- ************************************************************

-- call func_InsertClientData with correct parameters
DECLARE
output varchar(100);
BEGIN
output := func_InsertClientData('user205@gmail.com', 'P', 10000.0, 'B',
                                    'User 205 ', '174539823', '4465-089', 'Porto',
                                    '25', '4465-089', 'Porto', '26');

    dbms_output.put_line('Expected: Client inserted successfully');
    dbms_output.put_line(CONCAT('Actual: ', output));
END;
/

-- call func_InsertClientData with an already existing email
DECLARE
output varchar(100);
BEGIN
output := func_InsertClientData('user205@gmail.com', 'P', 10000.0, 'B',
                                    'User 205 ', '174539824', '4465-089', 'Maia',
                                    '12', '4465-089', 'Maia', '13');

    dbms_output.put_line('Expected: ORA-20001: A client with this email already exists');
    dbms_output.put_line(CONCAT('Actual: ', output));
END;
/

-- call func_InsertClientData with an already existing NIF
DECLARE
output varchar(100);
BEGIN
output := func_InsertClientData('nn@gmail.com', 'P', 10000.0, 'B',
                                    'User 205 ', '174539823', '4465-089', 'Maia',
                                    '10', '4465-089','Maia', '11');

    dbms_output.put_line('Expected: ORA-20002: A client with this nif already exists');
    dbms_output.put_line(CONCAT('Actual: ', output));
END;
/

-- call func_InsertClientData with another valid user
DECLARE
output varchar(100);
BEGIN
output := func_InsertClientData('user2052@gmail.com', 'P', 10000.0, 'B',
                                    'User 205 ', '174539821', '4475-089','Maia',
                                    '25', '4475-089','Maia', '26');

    dbms_output.put_line('Expected: Client inserted successfully');
    dbms_output.put_line(CONCAT('Actual: ', output));
END;
/


-- *******************************************************************
-- *  Function: func_InsertOrder
-- *  Description: Inserts a new order for a client into the database
-- ********************************************************************


BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Inserting a new order into the database|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/


-- call the procedure to insert a new order
DECLARE
actualNumberOfOrders   NUMBER;
    expectedNumberOfOrders NUMBER;
    actualTotalValue       NUMBER;
    expectedTotalValue     NUMBER;
    codigoClienteI         CLIENTE.CODIGOINTERNO%TYPE;
    codigoPostalI          MORADA.CODIGOPOSTAL%TYPE;
    numeroPortaI           MORADA.NUMEROPORTA%TYPE;
BEGIN

SELECT MAX(codigoInterno) INTO codigoClienteI FROM CLIENTE;
SELECT codigoPostal INTO codigoPostalI FROM MORADA WHERE codigoInternoCliente = codigoClienteI AND TIPOMORADA = 'E';
SELECT numeroPorta INTO numeroPortaI FROM MORADA WHERE codigoInternoCliente = codigoClienteI AND TIPOMORADA = 'E';

-- Get expected values
SELECT COUNT(*) INTO expectedNumberOfOrders FROM ENCOMENDA WHERE CODIGOINTERNOCLIENTE = codigoClienteI;
expectedNumberOfOrders := expectedNumberOfOrders + 1;
SELECT SUM(VALORTOTAL) INTO expectedTotalValue FROM ENCOMENDA WHERE CODIGOINTERNOCLIENTE = codigoClienteI;
expectedTotalValue := expectedTotalValue + 500.0;


-- Insert the order
proc_InsertOrder(codigoClienteI, codigoPostalI,
                     numeroPortaI, TO_DATE('19-04-2022', 'DD-MM-YYYY'),
                     'P', TO_DATE('30-04-2022', 'DD-MM-YYYY'),
                     TO_DATE('30-04-2022', 'DD-MM-YYYY'), 500.00);


    -- Get actual values
SELECT COUNT(*) INTO actualNumberOfOrders FROM ENCOMENDA WHERE CODIGOINTERNOCLIENTE = codigoClienteI;
SELECT SUM(VALORTOTAL) INTO actualTotalValue FROM ENCOMENDA WHERE CODIGOINTERNOCLIENTE = codigoClienteI;

-- Print results
dbms_output.put_line('Inserting an order:');
    dbms_output.put_line(CONCAT('Expected number of orders: ', expectedNumberOfOrders));
    dbms_output.put_line(CONCAT('Actual number of orders: ', actualNumberOfOrders));
    dbms_output.put_line(CONCAT('Expected total value: ', expectedTotalValue));
    dbms_output.put_line(CONCAT('Actual total value: ', actualTotalValue));
END;
/

-- call the procedure to insert a new order that is not in the last year
DECLARE
orderDate ENCOMENDA.DATAENCOMENDA%TYPE;
    codigoClienteI         CLIENTE.CODIGOINTERNO%TYPE;
    codigoPostalI          MORADA.CODIGOPOSTAL%TYPE;
    numeroPortaI           MORADA.NUMEROPORTA%TYPE;
BEGIN
    orderDate := TO_DATE('19-04-2020', 'DD-MM-YYYY');
SELECT MAX(codigoInterno) INTO codigoClienteI FROM CLIENTE;
SELECT codigoPostal INTO codigoPostalI FROM MORADA WHERE codigoInternoCliente = codigoClienteI AND TIPOMORADA = 'E';
SELECT numeroPorta INTO numeroPortaI FROM MORADA WHERE codigoInternoCliente = codigoClienteI AND TIPOMORADA = 'E';

-- Print results
dbms_output.put_line('Inserting an order that is not in the last year:');
    dbms_output.put_line('Expected: ORA-20003: The order date is not in the last year');
    dbms_output.put('Actual: ');
    -- Insert the order
    proc_InsertOrder(codigoClienteI, codigoPostalI,
                     numeroPortaI, orderDate,
                     'P', TO_DATE('30-04-2020', 'DD-MM-YYYY'),
                     TO_DATE('30-04-2020', 'DD-MM-YYYY'), 500.00);

END;
/

-- ******************************************************************************
-- *  View: Clients_view
-- *  Description: View that shows all the clients with some of their attributes
-- *******************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Opening Clients View|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

-- Open the view
SELECT * FROM CLIENTS_VIEW;


-- ******************************************************************************
-- *  Function : func_calculateRiskFactorOfAClient
-- *  Description: Function that calculates the risk factor of a client
-- *******************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Calculate the risk factor of a Client|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

-- call the function that calculates the risk factor for a specific client
DECLARE
riskFactor NUMBER;
codigoClienteI CLIENTE.CODIGOINTERNO%TYPE;
BEGIN

SELECT MAX(codigoInterno) INTO codigoClienteI FROM CLIENTE;

riskFactor := func_calculateRiskFactorOfAClient(codigoClienteI);
    riskFactor := ROUND(riskFactor, 2);
    DBMS_OUTPUT.PUT_LINE('Risk factor of the client: ' || riskFactor);
END;
/

--CLEANUP
DELETE
FROM ENCOMENDA
WHERE NUMEROENCOMENDA = ( SELECT MAX(NUMEROENCOMENDA) FROM ENCOMENDA );

DELETE FROM MORADA
WHERE CODIGOINTERNOCLIENTE IN (SELECT CODIGOINTERNO FROM CLIENTE WHERE NIF = '174539823');
DELETE FROM CLIENTE WHERE NIF = '174539823';

DELETE FROM MORADA
WHERE CODIGOINTERNOCLIENTE IN (SELECT CODIGOINTERNO FROM CLIENTE WHERE NIF = '174539821');
DELETE FROM CLIENTE WHERE NIF = '174539821';
-- END CLEANUP

BEGIN
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE('*                 US206 - Demonstration                    *');
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Inserting a new sector and its characteristics into the database|********');
END;
/

-- *******************************************************************************
-- *  Procedure : proc_CreateSector
-- *  Description: Procedure that inserts a sectors in an agricultural exploration
-- *******************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Create a sector in an agricultural exploration|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/
DECLARE
numberOfSectorsExpected NUMBER;
numberOfSectorsActual NUMBER;
BEGIN
SELECT COUNT(*) INTO numberOfSectorsExpected FROM Setor;
numberOfSectorsExpected := numberOfSectorsExpected + 1;
    proc_CreateSector('J', 100, 185.0);
SELECT COUNT(*) INTO numberOfSectorsActual FROM Setor;

dbms_output.put_line('Number of sectors expected: ' || numberOfSectorsExpected);
    dbms_output.put_line('Number of sectors actual: ' || numberOfSectorsActual);

END;
/
-- *******************************************************************************************
-- *  Procedure : proc_CreateCulture
-- *  Description: Procedure that inserts a culture in a sector of an agricultural exploration
-- *******************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Create a culture|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/
DECLARE
numberOfCulturesExpected NUMBER;
    numberOfCulturesActual NUMBER;
BEGIN
SELECT COUNT(*) INTO numberOfCulturesExpected FROM Cultura;
numberOfCulturesExpected := numberOfCulturesExpected + 1;
    proc_CreateCulture('J', 100, 185.0, 'P', 'Batata');
SELECT COUNT(*) INTO numberOfCulturesActual FROM Cultura;
dbms_output.put_line('Number of cultures expected: ' || numberOfCulturesExpected);
    dbms_output.put_line('Number of cultures actual: ' || numberOfCulturesActual);
END;
/
-- ********************************************************************
-- *  Procedure : proc_CreateCharacteristic
-- *  Description: Procedure that inserts a characteristic in a culture
-- ********************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Create a characteristic|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/
DECLARE
numberOfCharacteristicsExpected NUMBER;
    numberOfCharacteristicsActual NUMBER;
BEGIN
SELECT COUNT(*) INTO numberOfCharacteristicsExpected FROM Caracteristica;
numberOfCharacteristicsExpected := numberOfCharacteristicsExpected + 1;
    proc_CreateCharacteristic(1, 'Cultivo');
SELECT COUNT(*) INTO numberOfCharacteristicsActual FROM Caracteristica;
dbms_output.put_line('Number of characteristics expected: ' || numberOfCharacteristicsExpected);
    dbms_output.put_line('Number of characteristics actual: ' || numberOfCharacteristicsActual);
END;
/
-- ***********************************************************************
-- *  Procedure : proc_CreateParameter
-- *  Description: Procedure that inserts a parameter in of characteristic
-- ***********************************************************************
BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Create a parameter|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/
DECLARE
numberOfParametersExpected NUMBER;
    numberOfParametersActual NUMBER;
BEGIN
SELECT COUNT(*) INTO numberOfParametersExpected FROM Parametro;
numberOfParametersExpected := numberOfParametersExpected + 1;
    proc_CreateParameter(1, 1, 'Batata');
SELECT COUNT(*) INTO numberOfParametersActual FROM Parametro;
dbms_output.put_line('Number of parameters expected: ' || numberOfParametersExpected);
    dbms_output.put_line('Number of parameters actual: ' || numberOfParametersActual);
END;
/

-- **********************************************************************************************
-- *  Procedure : proc_ListSectorsAlphabetically
-- *  Description: Procedure that lists all sectors of an agricultural exploration alphabetically
-- **********************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|List all sectors of an agricultural exploration alphabetically|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/
--EXECUÇÃO DA LISTAGEM DE SETORES POR ORDEM ALFABÉTICA
BEGIN
    proc_ListSectorsAlphabetically(100);
END;
/
-- **************************************************************************************************
-- *  Procedure : proc_ListSectorsByAreaAsc
-- *  Description: Procedure that lists all sectors of an agricultural exploration by ascending order
-- **************************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|List all sectors of an agricultural exploration by ascending order|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/
BEGIN
    proc_ListSectorByAreaAsc(100);
END;
/
-- ***************************************************************************************************
-- *  Procedure : proc_ListSectorsByAreaDesc
-- *  Description: Procedure that lists all sectors of an agricultural exploration by descending order
-- ***************************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|List all sectors of an agricultural exploration by descending order|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/
BEGIN
    proc_ListSectorsByAreaDesc(100);
END;
/
-- **********************************************************************************************************
-- *  Procedure : proc_ListSectorsByCultureOrCultureType
-- *  Description: Procedure that lists all sectors of an agricultural exploration by culture or culture type
-- **********************************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|List all sectors of an agricultural exploration by culture or culture type|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

BEGIN
    proc_ListSectorsByCultureOrCultureType(100);
END;
/
--DELETE DE UM PARÂMETRO
DECLARE
erase NUMBER;
BEGIN
SELECT COUNT(*) INTO erase FROM Parametro;
DELETE FROM Parametro WHERE idParametro = erase;
END;
/

--DELETE DE UMA CARACTERÍSTICA
DECLARE
erase NUMBER;
BEGIN
SELECT COUNT(*) INTO ERASE FROM Caracteristica;
DELETE FROM Caracteristica WHERE idCaracteristica = erase;
END;
/

--DELETE DE UMA CULTURA
DECLARE
erase NUMBER;
BEGIN
SELECT COUNT(*) INTO erase FROM Cultura;
DELETE FROM Safra WHERE idCultura = erase;
DELETE FROM Cultura WHERE idCultura = erase;
END;
/

--DELETE DE UM SETOR
DELETE FROM Cultura WHERE designacaoSetor = 'J';
DELETE FROM Setor WHERE designacao = 'J' AND idExploracaoAgricola = 100;

BEGIN
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE('*                 US207 - Demonstration                    *');
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

-- After executing the procedure, the output should be taken this:
EXECUTE proc_get_sector_rentability_exploration_quantity(100, 'Chuchu');

-- After executing the procedure, the output should be taken this:
EXECUTE proc_get_sector_rentability_exploration_profit(100, 'Chuchu');

BEGIN
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE('*                 US208 - Demonstration                    *');
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('*******|Registering, Listing and Altering package data|*****');
END;
/

-- ************************************************************
-- *  Procedure: prc_create_fatorProducao
-- *  Description: Inserts a new fatorProducao into the database
-- ************************************************************

-- call prc_create_fatorProducao with correct values

BEGIN
    dbms_output.put_line('Expected: O Fator de Produção, - ... - foi criado com sucesso!');
    dbms_output.put_line('Actual: ');
    procCreateFatorProducao(
            'FatorProducao',
            'FE',
        'Fornecedor'
        );
END;
/

-- ************************************************************
-- *  Procedure: prc_create_constituinte
-- *  Description: Inserts a new constituinte into the database
-- ************************************************************

-- call prc_create_constituinte with correct values

BEGIN
    dbms_output.put_line('Expected: O Constituinte - ... - foi criado com sucesso!');
    dbms_output.put_line('Actual: ');
    procCreateConstituinte('Constituinte', 30, '%', 'E');
END;
/

-- call prc_create_constituinte with incorrect values

BEGIN
    dbms_output.put_line('Expected: Não foi possível adicionar o Constituinte, -...');
    dbms_output.put_line('Actual: ');
    procCreateConstituinte('Constituinte', -1, '%', 'E');
END;
/

-- call prc_create_fatorProducao with wrong values

BEGIN
    dbms_output.put_line('Expected: Não foi possível adicionar o Fator de Produção, - ...');
    dbms_output.put_line('Actual: ');
    procCreateFatorProducao(
            'FatorProducao',
            'OA',
        'Fornecedor'
        );
END;
/

-- ************************************************************
-- *  Procedure: prc_create_FatorProducaoConstituinte
-- *  Description: Inserts a new FatorProducaoConstituinte into the database
-- ************************************************************

-- call prc_create_FatorProducaoConstituinte with correct values

BEGIN
    dbms_output.put_line('Expected: A Ficha Técnica - ... - foi criada com sucesso!');
    dbms_output.put_line('Actual: ');
    procCreateFatorProducaoConstituinte('FatorProducao', 'Constituinte');
END;
/

-- CLEANUP
DELETE
FROM Encomenda e
WHERE CodigoInternoCliente = 1
  AND e.dataEncomenda = TO_DATE('15-02-2022', 'DD-MM-YYYY');

DELETE
FROM Encomenda e
WHERE CodigoInternoCliente = 1
  AND e.dataEncomenda = TO_DATE('15-02-2022', 'DD-MM-YYYY');


-- END CLEANUP



--This demo has the purpose to test the procedures in US209 (all demos have results according to our bootstrap)
BEGIN
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE('*                 US209 - Demonstration                    *');
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('*******|Registering, Listing and Altering package data|*****');
end;
/


-- ************************************************************
-- *  Procedure: proc_register_package
-- *  Description: Inserts a new package into the database
-- ************************************************************

-- call proc_register_package with a package total value over client's plafond

BEGIN
    dbms_output.put_line('Expected: ### Client plafond does not allow registration of package ###');
    dbms_output.put_line('Actual: ');
    proc_register_package(1,TO_DATE('15-02-2022', 'DD-MM-YYYY'), 1500);
END;
/

-- call proc_register_package with correct values

BEGIN
    dbms_output.put_line('Expected: Package registered for user: 1');
    dbms_output.put_line('Actual: ');
    proc_register_package(1,TO_DATE('15-02-2022', 'DD-MM-YYYY'), 1000);     --Success
END;
/

SELECT * FROM Encomenda e
WHERE CodigoInternoCliente = 1; --if successful, your package should appear here

-- ************************************************************
-- *  Procedure: proc_update_delivery_date
-- *  Description: Updates the delivery date of a package
-- ************************************************************

-- call proc_update_delivery_date with an invalid delivery date
DECLARE
package_number INTEGER;

BEGIN
SELECT numeroEncomenda INTO package_number
FROM Encomenda
WHERE CodigoInternoCliente = 1
  AND DataEncomenda = TO_DATE('15-02-2022', 'DD-MM-YYYY');
dbms_output.put_line('Expected: ### Invalid delivery date ###');
    dbms_output.put_line('Actual: ');
    proc_update_delivery_date(TO_DATE('15-07-2122', 'DD-MM-YYYY'), package_number);     --Invalid Date
END;
/

-- call proc_update_delivery_date with a valid delivery date

DECLARE
package_number INTEGER;

BEGIN
SELECT numeroEncomenda INTO package_number
FROM Encomenda
WHERE CodigoInternoCliente = 1
  AND DataEncomenda = TO_DATE('15-02-2022', 'DD-MM-YYYY');
dbms_output.put_line('Expected: ### Delivery Date has been updated ###');
    dbms_output.put_line('Actual: ');
    proc_update_delivery_date(TO_DATE('15-07-2022', 'DD-MM-YYYY'), package_number);     --Success
END;
/

-----------------------------------------------------------------------------

SELECT * FROM Encomenda e
WHERE e.numeroEncomenda = (SELECT numeroEncomenda
                           FROM Encomenda
                           WHERE CodigoInternoCliente = 1
                             AND DataEncomenda = TO_DATE('15-02-2022', 'DD-MM-YYYY')); --if successful, your delivery date update should appear here

-- ************************************************************
-- *  Procedure: proc_update_payment_date
-- *  Description: Updates the payment date of a package
-- ************************************************************

-- call proc_update_payment_date with an invalid payment date

DECLARE
package_number INTEGER;

BEGIN
SELECT numeroEncomenda INTO package_number
FROM Encomenda
WHERE CodigoInternoCliente = 1
  AND DataEncomenda = TO_DATE('15-02-2022', 'DD-MM-YYYY');
dbms_output.put_line('Expected: ### Invalid payment date ###');
    dbms_output.put_line('Actual: ');
    proc_update_payment_date(TO_DATE('15-08-2122', 'DD-MM-YYYY'), package_number);     --Invalid Date
END;
/
-- call proc_update_payment_date with an valid payment date


DECLARE
package_number INTEGER;

BEGIN
SELECT numeroEncomenda INTO package_number
FROM Encomenda
WHERE CodigoInternoCliente = 1
  AND DataEncomenda = TO_DATE('15-02-2022', 'DD-MM-YYYY');
dbms_output.put_line('Expected: ### Payment Date has been updated ###');
    dbms_output.put_line('Actual: ');
    proc_update_payment_date(TO_DATE('15-08-2022', 'DD-MM-YYYY'), package_number);     --Success
END;
/

-----------------------------------------------------------------------------


SELECT * FROM Encomenda e
WHERE e.numeroEncomenda = (SELECT numeroEncomenda
                           FROM Encomenda
                           WHERE CodigoInternoCliente = 1
                             AND DataEncomenda = TO_DATE('15-02-2022', 'DD-MM-YYYY')); --if successful, your payment date update should appear here


-- ************************************************************
-- *  Procedure: proc_list_package_by_state
-- *  Description: Shows the packages info of a given state
-- ************************************************************

-- call proc_list_package_by_state for registered packages

BEGIN

    proc_list_package_by_state('R');     --For registered packages
END;
/

SELECT count(*) AS registered_packages
FROM Encomenda e
WHERE e.estado = 'R';

-- call proc_list_package_by_state for delivered packages

BEGIN
    proc_list_package_by_state('E');     --For delivered packages
END;
/

SELECT count(*)  AS delivered_packages
FROM Encomenda e
WHERE e.estado = 'E';

-- call proc_list_package_by_state for paid packages

BEGIN
    proc_list_package_by_state('P');     --For paid packages
END;
/

SELECT count(*) AS paid_packages
FROM Encomenda e
WHERE e.estado = 'P';


--The desired output will be built by the procedure itself

BEGIN
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE('*                 US210 - Demonstration                    *');
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE(' ');
end;
/

/Inserir Operações Agrícolas, de forma inválida/

/* Id da exploração inválido */
DECLARE
output VARCHAR(100);

BEGIN
output := func_inserirOperacaoAgricola('C', 250, TO_DATE('08-07-2023','DD-MM-YYYY'), 'Aplicação Fator de Produção');

    dbms_output.put_line('Esperado - Erro: Combinação Inválida da Designação do Setor e do ID da Exploração Agrícola.');
    dbms_output.put_line(CONCAT('Real     - ', output));
END;
/

/* Data Agendada Inválida */
DECLARE
output VARCHAR(100);

BEGIN
output := func_inserirOperacaoAgricola('C', 200, TO_DATE('08-07-2021','DD-MM-YYYY'), 'Aplicação Fator de Produção');

    dbms_output.put_line('Esperado - Erro: Data Agendada Inválida (Data Agendada deve ser maior do que a data no momento da criação).');
    dbms_output.put_line(CONCAT('Real     - ', output));
END;
/

/* Inserir Operação Agrícola, de forma válida */
DECLARE
output VARCHAR(100);
    before INTEGER;
    after INTEGER;

BEGIN
SELECT COUNT(*) INTO before FROM OperacaoAgricola;

output := func_inserirOperacaoAgricola('C', 200, TO_DATE('08-07-2023','DD-MM-YYYY'), 'Aplicação Fator de Produção');

    dbms_output.put_line('Esperado - Inserção da Operação Agrícola com Sucesso.');
    dbms_output.put_line(CONCAT('Real     - ', output));

SELECT COUNT(*) INTO after FROM OperacaoAgricola;

dbms_output.put_line('Número de Operações Esperado: 1');
    dbms_output.put_line(CONCAT('Número de Operações Real    : ', after - before));
END;
/

/* Inserir Fatores Aplicados, de forma inválida */

/* Fator de Produção restringido */
DECLARE
output VARCHAR(100);

BEGIN
output := func_inserirFatorAplicado(1, 'Ametoctradina', 123.45, 'Fertirrega');

    dbms_output.put_line('Esperado - Fator producao Ametoctradina está presente na restrição com id 1.');
    dbms_output.put_line(CONCAT('Real     - ', output));
END;
/

/* Fator Aplicado já se encontra associado à Operação Agrícola */
INSERT INTO FatoresAplicados VALUES(18, 'Ametoctradina', 123.45, 'Fertirrega');
DECLARE
output VARCHAR(100);

BEGIN
output := func_inserirFatorAplicado(18, 'Ametoctradina', 123.45, 'Fertirrega');

    dbms_output.put_line('Esperado - Já existe um fator produção com esse nome na operação.');
    dbms_output.put_line(CONCAT('Real     - ', output));
END;
DELETE FROM FatoresAplicados WHERE idOperacaoAgricola = 18 AND nomeComercialFatorProducao = 'Ametoctradina';
/

/* Operação já foi cancelada ou realizada */
DECLARE
output VARCHAR(100);

BEGIN
output := func_inserirFatorAplicado(17, 'Ametoctradina', 123.45, 'Fertirrega');

    dbms_output.put_line('Esperado - Operação já foi realizada ou cancelada.');
    dbms_output.put_line(CONCAT('Real     - ', output));
END;
/

/* Inserir Fator Aplicado, de forma válida */
DECLARE
output VARCHAR(100);
    before INTEGER;
    after INTEGER;

BEGIN
SELECT COUNT(*) INTO before FROM FatoresAplicados;

output := func_inserirFatorAplicado(18, 'Ametoctradina', 123.45, 'Fertirrega');

    dbms_output.put_line('Esperado - Fator de producao adicionado com sucesso.');
    dbms_output.put_line(CONCAT('Real     - ', output));

SELECT COUNT(*) INTO after FROM FatoresAplicados;

dbms_output.put_line('Número de Fatores Aplicados Esperado: 1');
    dbms_output.put_line(CONCAT('Número de Fatores Aplicados Real    : ', after - before));
END;
DELETE FROM FatoresAplicados WHERE idOperacaoAgricola = 18 AND nomeComercialFatorProducao = 'Ametoctradina';
/

/* Listar Operações Restringidas no Momento */
BEGIN
    dbms_output.put_line('Esperado:');
    dbms_output.put_line('OperacaoAgricola ID: 6, DesignacaoSetor: Q, EstadoOperacao: A, NomeComercialFator: Ametoctradina');

    dbms_output.put_line('Real:');
    proc_listarOperacoesRestringidas();
END;
/

/* Listar Restrições Ativas para determinado Setor no Momento */
BEGIN
    dbms_output.put_line('Esperado:');
    dbms_output.put_line('Lista de Restrições Ativas
-----------------------------------------
ID     --> 1
Nome   --> Ametoctradina
Data I --> 20.10.09
Data F --> 23.04.09
-----------------------------------------
-----------------------------------------
ID     --> 2
Nome   --> Bentazona
Data I --> 14.10.13
Data F --> 23.04.07
-----------------------------------------');
    dbms_output.put_line('');
    dbms_output.put_line('Real:');
    proc_listarRestricoesAtivas('A', 100, TO_DATE('06-10-2022','DD-MM-YYYY'));
END;
/

/* Listar Operações Planeadas para determinado Setor */
BEGIN
    dbms_output.put_line('Esperado:');
    dbms_output.put_line('Lista de Operações Planeadas por Setor:
-----------------------------------------
Designacao Setor --> H
Data Agendada    --> 99.10.13
Tipo             --> Irrigação e adubação
-----------------------------------------
-----------------------------------------
Designacao Setor --> H
Data Agendada    --> 08.03.26
Tipo             --> Irrigação e adubação
-----------------------------------------');

    dbms_output.put_line('');
    dbms_output.put_line('Real:');
    proc_listarOperacoesPlaneadas(300);
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE('*                 US211 - Demonstration                    *');
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Atualizar ou Cancelar uma Operação que ainda não foi Realizada|********');
END;
/


-- ***********************************************************************************
-- *  Function : func_CancelOperation
-- *  Descrição: Função que permite cancelar uma operação que ainda não foi realizada.
-- *  Execução Válida.
-- ***********************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Cancela uma operação não realizada|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

DECLARE
stateOfOperationExpected CHAR(1);
    stateOfOperationActual CHAR(1);
BEGIN
    stateOfOperationExpected := 'C';
    dbms_output.put_line(func_cancelOperation(2));
SELECT estadoOperacao INTO stateOfOperationActual FROM OperacaoAgricola WHERE idOperacaoAgricola = 2;
dbms_output.put_line('Estado da Operação Esperado: ' || stateOfOperationExpected);
    dbms_output.put_line('Estado da Operacao Obtido: ' || stateOfOperationActual);
END;
/

/* VOLTAR A COLOCAR O ESTADO COM O SEU VALOR INICIAL */
UPDATE OperacaoAgricola SET estadoOperacao = 'A' WHERE idOperacaoAgricola = 2;


-- **************************************************************************************
-- *  Function : func_UpdateOperationDate
-- *  Descrição: Função que atualiza a data agendada de uma operação agrícola não realizada.Function that updates the scheduled date of a non-performed operation.
-- *  Execução Válida.
-- **************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Atualiza a data agendada de uma operação não realizada|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

DECLARE
stateOfOperationExpected CHAR(1);
    stateOfOperationActual CHAR(1);
    dataExpected DATE;
    dataActual DATE;
BEGIN
    stateOfOperationExpected := 'A';
    dataExpected := TO_DATE('2020-12-12', 'YYYY-MM-DD');
    dbms_output.put_line(func_UpdateOperationDate(1, TO_DATE('2020-12-12', 'YYYY-MM-DD')));
SELECT estadoOperacao INTO stateOfOperationActual FROM OperacaoAgricola WHERE idOperacaoAgricola = 1;
SELECT dataAgendada INTO dataActual FROM OperacaoAgricola WHERE idOperacaoAgricola = 1;

dbms_output.put_line('Estado da Operação Esperado: ' || stateOfOperationExpected || ' | Estado da Operação Atual: ' || stateOfOperationActual);
    dbms_output.put_line('Data Agendada Esperada: ' || dataExpected || ' | Data Agendada Atual: ' || dataActual);
END;
/

-- *****************************************************************************************
-- *  Function : func_UpdateOperationDate
-- *  Descrição: Função que atualiza a data agendada de uma operação agrícola não realizada.
-- *  Execução Inválida.
-- *****************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Atualiza a data agendada de uma operação não realizada (Inválido)|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

BEGIN
    dbms_output.put_line('Mensagem Esperada: Não é Possível Atualizar a Operação Agrícola, uma vez que já foi Realizada ou Cancelada.');
    dbms_output.put_line('Mensagem Obtida: ' || func_UpdateOperationDate(3, TO_DATE('2020-12-12', 'YYYY-MM-DD')));
END;
/

-- *********************************************************************************
-- *  Function : func_UpdateOperationType
-- *  Descrição: Função que atualiza o tipo de uma operação agrícola não realizada.
-- *  Execução Válida.
-- *********************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Atualiza o tipo de uma operação não realizada|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

DECLARE
stateOfOperationExpected CHAR(1);
    stateOfOperationActual CHAR(1);
    tipoExpected VARCHAR(40);
    tipoActual VARCHAR(40);
BEGIN
    stateOfOperationExpected := 'A';
    tipoExpected := 'Aplicação Fator de Produção';
    dbms_output.put_line(func_UpdateOperationType(1,  'Aplicação Fator de Produção'));
SELECT estadoOperacao INTO stateOfOperationActual FROM OperacaoAgricola WHERE idOperacaoAgricola = 1;
SELECT tipo INTO tipoActual FROM OperacaoAgricola WHERE idOperacaoAgricola = 1;
dbms_output.put_line('Estado da Operação Esperado: ' || stateOfOperationExpected || ' | Estado da Operação Atual: ' || stateOfOperationActual);
    dbms_output.put_line('Tipo de Operação Esperado: ' || tipoExpected || ' | Tipo de Operação Atual: ' || tipoActual);
END;
/

-- ***********************************************************************
-- *  Function : func_UpdateOperationType
-- *  Descrição: Função que atualiza o tipo de uma operação não realizada.
-- *  Execução Inválida.
-- ***********************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Atualiza o tipo de uma operação não realizada (Inválido)|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

BEGIN
    dbms_output.put_line('Mensagem Esperada: Não é Possível Atualizar a Operação Agrícola, uma vez que já foi Realizada ou Cancelada.');
    dbms_output.put_line('Mensagem Obtida: ' || func_UpdateOperationType(3,  'Aplicação Fator de Produção'));
END;
/

-- *************************************************************************************
-- *  Function : func_UpdateOperationAppliedQuantity
-- *  Descrição: Função que atualiza a quantidade aplicada a uma operação não realizada.
-- *  Execução Válida.
-- *************************************************************************************


BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Atualiza a quantidade aplicada a uma operação não realizada|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

DECLARE
stateOfOperationExpected CHAR(1);
    stateOfOperationActual CHAR(1);
    quantityExpected NUMBER(5,2);
    quantityActual NUMBER(5,2);
BEGIN
    stateOfOperationExpected := 'A';
    quantityExpected := 150.0;
    dbms_output.put_line(func_updateOperationAppliedQuantity(1, 'Imazamox' ,150.0));
SELECT estadoOperacao INTO stateOfOperationActual FROM OperacaoAgricola WHERE idOperacaoAgricola = 1;
SELECT quantidadeAplicada INTO quantityActual FROM FatoresAplicados WHERE idOperacaoAgricola = 1 AND nomeComercialFatorProducao = 'Imazamox';
dbms_output.put_line('Estado da Operação Esperado: ' || stateOfOperationExpected || ' | Estado da Operação Atual: ' || stateOfOperationActual);
    dbms_output.put_line('Quantidade Aplicada Esperada: ' || quantityExpected || ' | Quantidade Aplicada Atual: ' || quantityActual);
END;
/

-- *************************************************************************************
-- *  Function : func_UpdateOperationAppliedQuantity
-- *  Descrição: Função que atualiza a quantidade aplicada a uma operação não realizada.
-- *  Execução Inválida.
-- *************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Atualiza a quantidade aplicada a uma operação não realizada (Inválido)|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

BEGIN
    dbms_output.put_line('Mensagem Esperada: Não é Possível Atualizar a Operação Agrícola, uma vez que já foi Realizada ou Cancelada.');
    dbms_output.put_line('Mensagem Obtida: ' || func_updateOperationAppliedQuantity(3, 'Boscalide' ,150.0));
END;
/

-- ******************************************************************************************************************
-- *  Function : func_UpdateOperationApplicationForm
-- *  Descrição: Função que atualiza a forma de aplicação de um fator aplicado a uma operação agrícola não realizada.
-- *  Execução Válida.
-- ******************************************************************************************************************


BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Atualiza a forma de aplicação de um fator aplicado a uma operação agrícola não realizada|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

DECLARE
stateOfOperationExpected CHAR(1);
    stateOfOperationActual CHAR(1);
    formOfApplicationExpected VARCHAR(10);
    formOfApplicationActual VARCHAR(10);
BEGIN
    stateOfOperationExpected := 'A';
    formOfApplicationExpected := 'Solo';
    dbms_output.put_line(func_UpdateOperationApplicationForm(1, 'Imazamox' , 'Solo'));
SELECT estadoOperacao INTO stateOfOperationActual FROM OperacaoAgricola WHERE idOperacaoAgricola = 1;
SELECT formaAplicacao INTO formOfApplicationActual FROM FatoresAplicados WHERE idOperacaoAgricola = 1 AND nomeComercialFatorProducao = 'Imazamox';
dbms_output.put_line('Estado da Operação Esperado: ' || stateOfOperationExpected || ' | Estado da Operação Atual: ' || stateOfOperationActual);
    dbms_output.put_line('Forma de Aplicação Esperada: ' || formOfApplicationExpected || ' | Forma de Aplicação Atual: ' || formOfApplicationActual);
END;
/

-- ****************************************************************************************
-- *  Function : func_UpdateOperationApplicationForm
-- *  Descrição: Função que atualiza a forma de aplicação de um fator aplicado a uma operação agrícola não realizada.
-- *  Execução Inválida.
-- ****************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Atualiza a forma de aplicação de um fator aplicado a uma operação agrícola não realizada (Inválido)|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

BEGIN
    dbms_output.put_line('Mensagem Esperada: Não é Possível Atualizar a Operação Agrícola, uma vez que já foi Realizada ou Cancelada.');
    dbms_output.put_line('Mensagem Obtida: ' || func_UpdateOperationApplicationForm(3, 'Boscalide' ,'Solo'));
END;
/


-- *********************************************************************************************************
-- *  Function : func_createFatorAplicado
-- *  Descrição: Função que adiciona um fator aplicado sem restrições a uma operação agrícola não realizada.
-- *  Execução Válida.
-- *********************************************************************************************************
BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Adiciona um fator aplicado sem restrições a uma operação agrícola não realizada|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

DECLARE
numberOfAppliedFactorsExpected NUMBER;
    numberOfAppliedFactorsActual NUMBER;
BEGIN
SELECT COUNT(*) INTO numberOfAppliedFactorsExpected FROM FatoresAplicados WHERE idOperacaoAgricola = 18;
numberOfAppliedFactorsExpected := numberOfAppliedFactorsExpected + 1;
    dbms_output.put_line(func_createFatorAplicado(18, 'Ametoctradina', 123.45, 'Fertirrega'));
SELECT COUNT(*) INTO numberOfAppliedFactorsActual FROM FatoresAplicados WHERE idOperacaoAgricola = 18;
dbms_output.put_line('Número de Fatores Aplicados Esperado: ' || numberOfAppliedFactorsExpected || ' | Número de Fatores Aplicados Atual: ' || numberOfAppliedFactorsActual);
END;
/

-- *********************************************************************************************************
-- *  Function : func_createFatorAplicado
-- *  Descrição: Função que adiciona um fator aplicado sem restrições a uma operação agrícola não realizada.
-- *  Execução Inválida.
-- *********************************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Adiciona um fator aplicado sem restrições a uma operação agrícola não realizada (Inválido)|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

BEGIN
    dbms_output.put_line('Mensagem Esperada: Já existe um Fator de Produção com esse Nome Comercial para a mesma Operação Agrícola.');
    dbms_output.put_line('Mensagem Obtida: ' || func_createFatorAplicado(18, 'Ametoctradina', 123.45, 'Fertirrega'));
END;
/

-- *********************************************************************************************************
-- *  Function : func_createFatorAplicado
-- *  Descrição: Função que adiciona um fator aplicado sem restrições a uma operação agrícola não realizada.
-- *  Execução Inválida.
-- *********************************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Adiciona um fator aplicado sem restrições a uma operação agrícola não realizada (Inválido)|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

BEGIN
    dbms_output.put_line('Mensagem Esperada: Operação foi Cancelada ou já estava Realizada.');
    dbms_output.put_line('Mensagem Obtida: ' || func_createFatorAplicado(4, 'Inválido', 81.0, 'Solo'));
END;
/




-- ****************************************************************************************
-- *  Function : func_removeFatorAplicado
-- *  Descrição: Função que remove um fator aplicado a uma operação agrícola não realizada.
-- *  Execução Válida.
-- ****************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Remover um fator aplicado sem restrições a uma operação não realizada|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

DECLARE
numberOfAppliedFactorsExpected NUMBER;
    numberOfAppliedFactorsActual NUMBER;
BEGIN
SELECT COUNT(*) INTO numberOfAppliedFactorsExpected FROM FatoresAplicados WHERE idOperacaoAgricola = 18;
numberOfAppliedFactorsExpected := numberOfAppliedFactorsExpected - 1;
    dbms_output.put_line(func_removeFatorAplicado(18, 'Ametoctradina'));
SELECT COUNT(*) INTO numberOfAppliedFactorsActual FROM FatoresAplicados WHERE idOperacaoAgricola = 18;
dbms_output.put_line('Número de Fatores Aplicados Esperado: ' || numberOfAppliedFactorsExpected || ' | Número de Fatores Aplicados Obtido: ' || numberOfAppliedFactorsActual);
END;
/

-- ****************************************************************************************
-- *  Function : func_removeFatorAplicado
-- *  Descrição: Função que remove um fator aplicado a uma operação agrícola não realizada.
-- *  Execução Inválida.
-- ****************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Remover um fator aplicado sem restrições a uma operação não realizada (Inválido)|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

BEGIN
    dbms_output.put_line('Mensagem Esperada: Não Existe um Fator Aplicado com esse Nome Comercial para a Operação Agrícola Especificada.');
    dbms_output.put_line('Mensagem Obtida: '||func_removeFatorAplicado(18, 'Nome Não Existente.'));
END;
/

-- ****************************************************************************************
-- *  Function : func_removeFatorAplicado
-- *  Descrição: Função que remove um fator aplicado a uma operação agrícola não realizada.
-- *  Execução Inválida.
-- ****************************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Remover um fator aplicado sem restrições a uma operação não realizada (Inválido)|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

BEGIN
    dbms_output.put_line('Mensagem Esperada: Operação já foi Cancelada ou Realizada.');
    dbms_output.put_line('Mensagem Obtida: ' || func_removeFatorAplicado(4, 'Imazamox'));
END;
/

-- CLEANUP
DELETE FROM INPUT_SENSOR;


DELETE FROM SENSORLEITURAS;



DELETE FROM LOGLEITURASINPUT;
-- END CLEANUP

--BOOTSTRAP
INSERT INTO INPUT_SENSOR VALUES ('00012HS078783897642310:35');
INSERT INTO INPUT_SENSOR VALUES ('00013HS079123456789010:36');
INSERT INTO INPUT_SENSOR VALUES ('00014HS111483897642310:37');
--END BOOTSTRAP

--This demo has the purpose to test the procedures in US212 (all demos have results according to our bootstrap)
BEGIN
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE('*                 US212 - Demonstration                    *');
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('*| Reading, testing and transferring data from two tables |*');
end;
/

-- ************************************************************
-- *  Function: func_get_nth_element
-- *  Description: Gets the nth element of input_string from input_sensor
-- ************************************************************

-- call func_get_nth_element for sensor id

BEGIN
    dbms_output.put_line('Expected: 62943');
    dbms_output.put_line('Actual: ' || FUNC_GET_NTH_ELEMENT('62943HS078783897642310:35',1));

END;

/

-- call func_get_nth_element for sensor type

BEGIN
    dbms_output.put_line('Expected: HS');
    dbms_output.put_line('Actual: ' || FUNC_GET_NTH_ELEMENT('62943HS078783897642310:35',2));

END;

/

-- call func_get_nth_element for reading value

BEGIN
    dbms_output.put_line('Expected: 078');
    dbms_output.put_line('Actual: ' || FUNC_GET_NTH_ELEMENT('62943HS078783897642310:35',3));

END;
/

-- call func_get_nth_element for reference value

BEGIN
    dbms_output.put_line('Expected: 7838976423');
    dbms_output.put_line('Actual: ' || FUNC_GET_NTH_ELEMENT('62943HS078783897642310:35',4));

END;
/

-- call func_get_nth_element for time of reading

BEGIN
    dbms_output.put_line('Expected: 10:35');
    dbms_output.put_line('Actual: ' || FUNC_GET_NTH_ELEMENT('62943HS078783897642310:35',5));

END;
/

-- ************************************************************
-- *  Procedure: proc_transfer_sensor_inputs
-- *  Description: Gets all tuples from input_sensor and after doing checks, inserts it or rejects it
-- ************************************************************

-- call proc_transfer_sensor_inputs
BEGIN
    DBMS_OUTPUT.PUT_LINE('EXPECTED:');
    DBMS_OUTPUT.PUT_LINE('------------------------------------');
    DBMS_OUTPUT.PUT_LINE('### SENSOR INPUT TRANSFER REPORT ###');
    DBMS_OUTPUT.PUT_LINE('Number of inputs read ----------> 3');
    DBMS_OUTPUT.PUT_LINE('Number of inputs transferred ---> 2');
    DBMS_OUTPUT.PUT_LINE('Number of inputs with errors ---> 1');
    DBMS_OUTPUT.PUT_LINE('------------------------------------');
    DBMS_OUTPUT.PUT_LINE('ACTUAL:');
    proc_transfer_sensor_inputs();
END;
/

--This shows that the transferred values appear on the sensor table
SELECT * FROM SENSORLEITURAS
WHERE REFERENCIA = 7838976423
   OR REFERENCIA = 1234567890;

--This shows that process execution has been registered on the LogLeiturasInput table
SELECT * FROM LOGLEITURASINPUT;

--This shows that only the inputs with mistakes are left in input_sensor table
SELECT * FROM INPUT_SENSOR;

-- *********************************************************************************
-- *  DISCLAIMER: IT IS NEEDED TO RUN THE BOOTSTRAP IN ORDER FOR THIS TO WORK!!!   *
-- *********************************************************************************


BEGIN
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE('*                 US213 - Demonstration                    *');
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE('    ');
    DBMS_OUTPUT.PUT_LINE('**********|Making changes in the OperacaoAgricola Table|********');
end;
/

-- ************************************************************
-- *  Function: trig_registOperationOnOperacaoAgricola
-- *  Description: Inserts a new row for each change made
-- *  in the OperacaoAgricola table
-- ************************************************************

-- making 10 changes to the OperacaoAgricola table
DECLARE
auxiliarID INTEGER;
BEGIN

INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO)  VALUES('A', 100, TO_DATE('07-03-2023','DD-MM-YYYY'), TO_DATE('17-03-2023','DD-MM-YYYY'), 'Irrigação e adubação', 'R');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO) VALUES('A', 100, TO_DATE('06-03-2023','DD-MM-YYYY'), TO_DATE('03-04-2023','DD-MM-YYYY'), 'Aplicação Fator de Produção', 'R');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO) VALUES('A', 100, TO_DATE('09-01-2023','DD-MM-YYYY'), TO_DATE('15-02-2023','DD-MM-YYYY'), 'Irrigação e adubação', 'R');
DELETE FROM OperacaoAgricola WHERE DATAAGENDADA = TO_DATE('09-01-2023','DD-MM-YYYY');
UPDATE OperacaoAgricola SET DATAAGENDADA = TO_DATE('09-03-2023','DD-MM-YYYY') where DATAAGENDADA = TO_DATE('07-03-2023','DD-MM-YYYY');
UPDATE OperacaoAgricola SET DATAAGENDADA = TO_DATE('07-02-2023','DD-MM-YYYY') where DATAAGENDADA = TO_DATE('06-03-2023','DD-MM-YYYY');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO) VALUES('A', 100, TO_DATE('18-03-2023','DD-MM-YYYY'), TO_DATE('19-03-2023','DD-MM-YYYY'), 'Irrigação e adubação', 'R');
INSERT INTO OperacaoAgricola(DESIGNACAOSETOR,IDEXPLORACAOAGRICOLA,DATAAGENDADA,DATAREALIZACAO,TIPO,ESTADOOPERACAO) VALUES('A', 100, TO_DATE('06-02-2023','DD-MM-YYYY'), TO_DATE('04-04-2023','DD-MM-YYYY'), 'Aplicação Fator de Produção', 'R');
UPDATE OperacaoAgricola SET DATAREALIZACAO = TO_DATE('20-03-2023','DD-MM-YYYY') where DATAREALIZACAO = TO_DATE('19-03-2023','DD-MM-YYYY');
DELETE FROM FatoresAplicados WHERE idOperacaoAgricola = 1;
DELETE FROM OperacaoAgricola WHERE DATAREALIZACAO = TO_DATE('04-04-2023','DD-MM-YYYY');


END;
/

-- ************************************************************
-- *  Function: proc_checkAuditlog
-- *  Description: Visualizes the audit log for a given sector
-- ************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Visualizing the Audit log|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

CALL PROC_CHECKAUDITLOG('A', 100);


-- CLEANUP
--delete from Auditoria where designacaoSetor = 'A' and idExploracaoAgricola = 100;
DELETE FROM AUDITORIA WHERE IDAUDITORIA IN (
    SELECT IDAUDITORIA FROM
        ( SELECT * FROM AUDITORIA
          ORDER BY IDAUDITORIA DESC) WHERE ROWNUM <= 10);

DELETE FROM OPERACAOAGRICOLA WHERE IDOPERACAOAGRICOLA IN (
    SELECT IDOPERACAOAGRICOLA FROM
        ( SELECT * FROM OPERACAOAGRICOLA
          ORDER BY IDOPERACAOAGRICOLA DESC) WHERE ROWNUM <= 3);
-- END CLEANUP

-- CLEANUP
DELETE FROM Encomenda e
WHERE e.codigoInternoCliente = 70;

DELETE FROM Cliente c
WHERE c.codigoInterno = 70;

DELETE FROM Hub h
WHERE h.idHub = 'CT10' OR h.idHub = 'CT11' OR h.idHub = 'CT14';
-- END CLEANUP


/* Esta demo tem o objetivo de testar os procedimentos da US215 (todas as demos têm resultados de acordo com o bootstrap) */
BEGIN
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE('*                 US215 - Demonstration                    *');
    DBMS_OUTPUT.PUT_LINE('************************************************************');
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**| Atualizar tabelas, hubs por defeito e inserir encomendas |**');
end;
/

-- **************************************************************************************************
-- *  Procedure: proc_UpdateHub
-- *  Descrição: Procedure que permite atualizar a tabela Hub quando a tabela input_hub é atualizada.
-- **************************************************************************************************


BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Atualiza a tabela Hub quando a tabela Input_Hub é atualizada|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

/* PARA O CORRETO FUNCIONAMENTO DESTA EXECUÇÃO NO SQL DEVELOPER, DEVE SER ALTERADO O SEPARADOR DECIMAL DE "," para "." EM TOOLS > PREFERENCES > DATABASE > NLS > DECIMAL SEPARATOR */

BEGIN
   proc_UpdateHub;
END;
/

-- **********************************************************************************
-- *  Procedure: proc_UpdateDefaultHub
-- *  Descrição: Atualizar ou se não existente, inserir um hub id na tabela Cliente
-- **********************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Atualiza Ou Insere caso não exista, um hub id na Tabela Cliente|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/

INSERT INTO Cliente(codigoInterno, EMAIL, TIPO, PLAFOND, NIVELNEGOCIO, NOME, NIF, idHub) VALUES(70, 'abc@abc.com', 'E', 1250.50, 'C', 'abc', 247677979, 'CT10');

-- call proc_update_default_hub for a client

--should show CT10
SELECT idHub FROM Cliente
WHERE email = 'abc@abc.com';

BEGIN
    DBMS_OUTPUT.PUT_LINE('Expected: ### Default hub for client has been updated ###');
    DBMS_OUTPUT.PUT_LINE('Actual:');

    proc_UpdateDefaultHub(70, 'CT11');
END;
/

--should show CT11
SELECT idHub FROM Cliente
WHERE email = 'abc@abc.com';

-- **********************************************************************************
-- *  Procedure: proc_RegisterPackageWithHub
-- *  Descrição: Regista uma encomenda com um hub como sítio de entrega e sem morada
-- **********************************************************************************

BEGIN
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('**********|Registar uma encomenda com um hub como sítio de entrega|********');
    DBMS_OUTPUT.PUT_LINE(' ');
END;
/


-- call proc_register_package_with_hub

BEGIN
    dbms_output.put_line('Expected: ');
    dbms_output.put_line('Package registered for user: 70' );
    dbms_output.put_line('Pick-up registered for hub: CT10' );
    dbms_output.put_line('Actual: ');
    proc_RegisterPackageWithHub(70,TO_DATE('19-04-2005', 'DD-MM-YYYY'),10,'CT10');
END;
/

--should show a tuple of Encomenda where the hub is CT10 and the client who ordered it having default hub CT11
SELECT * FROM Encomenda e
WHERE e.codigoInternoCliente = 70;
SELECT * FROM Cliente c
WHERE c.codigoInterno = 70;